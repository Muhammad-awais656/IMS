@model IMS.Models.PersonalPaymentViewModel
@{
    ViewData["Title"] = "Personal Payments";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fa-solid fa-credit-card me-2"></i>Personal Payments
                    </h4>
                </div>
                <div class="card-body">
                    <!-- Filter Section -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">
                                        <i class="fa-solid fa-filter me-2"></i>Filters
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <form method="get" asp-action="Index">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <label for="PaymentFilters.BankName" class="form-label">Bank Name:</label>
                                                <select name="PaymentFilters.BankName" class="form-select">
                                                    <option value="">--All Banks--</option>
                                                    @foreach (var bank in ViewBag.BankNames as SelectList)
                                                    {
                                                        <option value="@bank.Value" selected="@bank.Selected">@bank.Text</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="PaymentFilters.AccountNumber" class="form-label">Account Number:</label>
                                                <input type="text" name="PaymentFilters.AccountNumber" class="form-control" 
                                                       value="@Model.PaymentFilters.AccountNumber" placeholder="Enter account number">
                                            </div>
                                            <div class="col-md-3">
                                                <label for="PaymentFilters.TransactionType" class="form-label">Transaction Type:</label>
                                                <select name="PaymentFilters.TransactionType" class="form-select">
                                                    @foreach (var type in ViewBag.TransactionTypes as SelectList)
                                                    {
                                                        <option value="@type.Value" selected="@type.Selected">@type.Text</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <label for="PaymentFilters.PaymentDescription" class="form-label">Description:</label>
                                                <input type="text" name="PaymentFilters.PaymentDescription" class="form-control" 
                                                       value="@Model.PaymentFilters.PaymentDescription" placeholder="Enter description">
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-2">
                                                <label for="CreditAmountFrom" class="form-label">Credit From:</label>
                                                <input type="number" name="CreditAmountFrom" class="form-control" 
                                                       value="@Model.PaymentFilters.CreditAmountFrom" step="0.01" min="0">
                                            </div>
                                            <div class="col-md-2">
                                                <label for="CreditAmountTo" class="form-label">Credit To:</label>
                                                <input type="number" name="CreditAmountTo" class="form-control" 
                                                       value="@Model.PaymentFilters.CreditAmountTo" step="0.01" min="0">
                                            </div>
                                            <div class="col-md-2">
                                                <label for="DebitAmountFrom" class="form-label">Debit From:</label>
                                                <input type="number" name="DebitAmountFrom" class="form-control" 
                                                       value="@Model.PaymentFilters.DebitAmountFrom" step="0.01" min="0">
                                            </div>
                                            <div class="col-md-2">
                                                <label for="DebitAmountTo" class="form-label">Debit To:</label>
                                                <input type="number" name="DebitAmountTo" class="form-control" 
                                                       value="@Model.PaymentFilters.DebitAmountTo" step="0.01" min="0">
                                            </div>
                                            <div class="col-md-2">
                                                <label for="FromDate" class="form-label">From Date:</label>
                                                <input type="date" name="FromDate" class="form-control" 
                                                       value="@(Model.PaymentFilters.DateFrom != default(DateTime) ? Model.PaymentFilters.DateFrom.ToString("yyyy-MM-dd") : "")">
                                            </div>
                                            <div class="col-md-2">
                                                <label for="ToDate" class="form-label">To Date:</label>
                                                <input type="date" name="ToDate" class="form-control" 
                                                       value="@(Model.PaymentFilters.DateTo != default(DateTime) ? Model.PaymentFilters.DateTo.ToString("yyyy-MM-dd") : "")">
                                            </div>
                                            <div class="col-md-2 d-flex align-items-end">
                                                <button type="submit" class="btn btn-primary me-2">
                                                    <i class="fa-solid fa-search me-1"></i>Search
                                                </button>
                                                <a asp-action="Index" class="btn btn-outline-secondary me-2">
                                                    <i class="fa-solid fa-refresh me-1"></i>Clear
                                                </a>
                                                <a asp-action="Create" class="btn btn-success">
                                                    <i class="fa-solid fa-plus me-1"></i>Add Payment
                                                </a>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Results Section -->
                    <div class="row">
                        <div class="col-12">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Bank Name</th>
                                            <th>Account Number</th>
                                            <th>Account Holder</th>
                                            <th>Credit Amount</th>
                                            <th>Debit Amount</th>
                                            <th>Net Amount</th>
                                            <th>Description</th>
                                            <th>Payment Date</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.PersonalPaymentList != null && Model.PersonalPaymentList.Any())
                                        {
                                            @foreach (var payment in Model.PersonalPaymentList)
                                            {
                                                <tr>
                                                    <td>@payment.BankName</td>
                                                    <td>@payment.AccountNumber</td>
                                                    <td>@payment.AccountHolderName</td>
                                                    <td class="text-end text-success">@(payment.CreditAmount > 0 ? payment.CreditAmount.ToString("C") : "-")</td>
                                                    <td class="text-end text-danger">@(payment.DebitAmount > 0 ? payment.DebitAmount.ToString("C") : "-")</td>
                                                    <td class="text-end fw-bold @(payment.NetAmount >= 0 ? "text-success" : "text-danger")">@payment.NetAmount.ToString("C")</td>
                                                    <td>@payment.PaymentDescription</td>
                                                    <td>@payment.PaymentDate.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            <a asp-action="Details" asp-route-id="@payment.PersonalPaymentId" 
                                                               class="btn btn-sm btn-outline-info" title="View Details">
                                                                <i class="fa-solid fa-eye"></i>
                                                            </a>
                                                            <a asp-action="Edit" asp-route-id="@payment.PersonalPaymentId" 
                                                               class="btn btn-sm btn-outline-warning" title="Edit">
                                                                <i class="fa-solid fa-edit"></i>
                                                            </a>
                                                            <button type="button" class="btn btn-sm btn-outline-primary" 
                                                                    title="Transaction History" 
                                                                    onclick="showTransactionHistory(@payment.PersonalPaymentId, '@payment.BankName', '@payment.AccountNumber')">
                                                                <i class="fa-solid fa-history"></i>
                                                            </button>
                                                            <a asp-action="Delete" asp-route-id="@payment.PersonalPaymentId" 
                                                               class="btn btn-sm btn-outline-danger" title="Delete">
                                                                <i class="fa-solid fa-trash"></i>
                                                            </a>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="9" class="text-center text-muted py-4">
                                                    <i class="fa-solid fa-inbox fa-2x mb-2"></i>
                                                    <br>No personal payments found
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <div class="d-flex justify-content-between align-items-center mt-3">
                            <span class="text-muted">Total: @Model.TotalCount | Showing @Model.PageSize Records per page</span>
                            <div class="d-flex align-items-center">
                                <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                                    <option value="5" selected="@(Model.PageSize == 5)">5</option>
                                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                                </select>
                            </div>
                            <nav aria-label="Personal Payments pagination">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                        <a class="page-link" asp-action="Index" asp-route-pageNumber="1" asp-route-pageSize="@Model.PageSize">First</a>
                                    </li>
                                    <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                                    </li>
                                    @{
                                        int startPage = Math.Max(1, Model.CurrentPage - 1);
                                        int endPage = Math.Min(Model.TotalPages, startPage + 2);
                                        if (endPage - startPage < 2)
                                        {
                                            startPage = Math.Max(1, endPage - 2);
                                        }
                                    }
                                    @for (int i = startPage; i <= endPage; i++)
                                    {
                                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                                        </li>
                                    }
                                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                                    </li>
                                    <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                        <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize">Last</a>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Transaction History Modal -->
<div class="modal fade" id="transactionHistoryModal" tabindex="-1" aria-labelledby="transactionHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="transactionHistoryModalLabel">
                    <i class="fa-solid fa-history me-2"></i>Transaction History
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6><strong>Account Details:</strong></h6>
                        <p class="mb-1"><strong>Bank:</strong> <span id="modalBankName"></span></p>
                        <p class="mb-1"><strong>Account Number:</strong> <span id="modalAccountNumber"></span></p>
                    </div>
                    <div class="col-md-6">
                        <h6><strong>Account Summary:</strong></h6>
                        <p class="mb-1"><strong>Current Balance:</strong> <span id="modalCurrentBalance" class="fw-bold"></span></p>
                        <p class="mb-1"><strong>Total Transactions:</strong> <span id="modalTransactionCount"></span></p>
                    </div>
                </div>
                
                <!-- Filters -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="historyFromDate" class="form-label">From Date:</label>
                        <input type="date" id="historyFromDate" class="form-control">
                    </div>
                    <div class="col-md-3">
                        <label for="historyToDate" class="form-label">To Date:</label>
                        <input type="date" id="historyToDate" class="form-control">
                    </div>
                    <div class="col-md-3">
                        <label for="historyTransactionType" class="form-label">Transaction Type:</label>
                        <select id="historyTransactionType" class="form-select">
                            <option value="">All</option>
                            <option value="Credit">Credit</option>
                            <option value="Debit">Debit</option>
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="button" class="btn btn-primary" onclick="loadTransactionHistory()">
                            <i class="fa-solid fa-search me-1"></i>Filter
                        </button>
                    </div>
                </div>
                
                <!-- Loading indicator -->
                <div id="historyLoading" class="text-center py-4" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading transaction history...</p>
                </div>
                
                <!-- Transaction History Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="transactionHistoryTable">
                        <thead class="table-dark">
                            <tr>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Balance</th>
                                <th>Description</th>
                                <th>Sale Reference</th>
                            </tr>
                        </thead>
                        <tbody id="transactionHistoryBody">
                            <!-- Transaction data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination for history -->
                <nav aria-label="Transaction history pagination" id="historyPagination" style="display: none;">
                    <ul class="pagination justify-content-center" id="historyPaginationList">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentPersonalPaymentId = null;
    let currentHistoryPage = 1;
    const historyPageSize = 10;

    function changePageSize(selectElement) {
        const pageSize = selectElement.value;
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('pageSize', pageSize);
        currentUrl.searchParams.set('pageNumber', '1');
        window.location.href = currentUrl.toString();
    }

    function showTransactionHistory(personalPaymentId, bankName, accountNumber) {
        currentPersonalPaymentId = personalPaymentId;
        
        // Set modal title and account details
        document.getElementById('modalBankName').textContent = bankName;
        document.getElementById('modalAccountNumber').textContent = accountNumber;
        
        // Reset filters
        document.getElementById('historyFromDate').value = '';
        document.getElementById('historyToDate').value = '';
        document.getElementById('historyTransactionType').value = '';
        
        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('transactionHistoryModal'));
        modal.show();
        
        // Load initial data
        loadTransactionHistory();
    }

    function loadTransactionHistory(page = 1) {
        if (!currentPersonalPaymentId) return;
        
        currentHistoryPage = page;
        
        // Show loading indicator
        document.getElementById('historyLoading').style.display = 'block';
        document.getElementById('transactionHistoryTable').style.display = 'none';
        document.getElementById('historyPagination').style.display = 'none';
        
        // Get filter values
        const fromDate = document.getElementById('historyFromDate').value;
        const toDate = document.getElementById('historyToDate').value;
        const transactionType = document.getElementById('historyTransactionType').value;
        
        // Build query parameters
        const params = new URLSearchParams({
            personalPaymentId: currentPersonalPaymentId,
            pageNumber: page,
            pageSize: historyPageSize
        });
        
        if (fromDate) params.append('fromDate', fromDate);
        if (toDate) params.append('toDate', toDate);
        if (transactionType) params.append('transactionType', transactionType);
        
        // Make AJAX call
        fetch(`/PersonalPayments/GetTransactionHistory?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                displayTransactionHistory(data);
            })
            .catch(error => {
                console.error('Error loading transaction history:', error);
                showHistoryError('Failed to load transaction history. Please try again.');
            })
            .finally(() => {
                document.getElementById('historyLoading').style.display = 'none';
                document.getElementById('transactionHistoryTable').style.display = 'table';
            });
    }

    function displayTransactionHistory(data) {
        const tbody = document.getElementById('transactionHistoryBody');
        tbody.innerHTML = '';
        
        if (data.transactions && data.transactions.length > 0) {
            // Update account summary
            if (data.accountSummary) {
                document.getElementById('modalCurrentBalance').textContent = 
                    'Rs' + parseFloat(data.accountSummary.currentBalance).toFixed(2);
                document.getElementById('modalTransactionCount').textContent = data.accountSummary.transactionCount;
            }
            
            // Display transactions
            data.transactions.forEach(transaction => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${new Date(transaction.transactionDate).toLocaleDateString()}</td>
                    <td>
                        <span class="badge ${transaction.transactionType === 'Credit' ? 'bg-success' : 'bg-danger'}">
                            ${transaction.transactionType}
                        </span>
                    </td>
                    <td class="text-end ${transaction.transactionType === 'Credit' ? 'text-success' : 'text-danger'}">
                        Rs${parseFloat(transaction.amount).toFixed(2)}
                    </td>
                    <td class="text-end fw-bold">Rs${parseFloat(transaction.balance).toFixed(2)}</td>
                    <td>${transaction.transactionDescription || '-'}</td>
                    <td>${transaction.billNumber ? 'Bill #' + transaction.billNumber : '-'}</td>
                `;
                tbody.appendChild(row);
            });
            
            // Display pagination if needed
            if (data.totalPages > 1) {
                displayHistoryPagination(data.currentPage, data.totalPages);
                document.getElementById('historyPagination').style.display = 'block';
            }
        } else {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center text-muted py-4">
                        <i class="fa-solid fa-inbox fa-2x mb-2"></i>
                        <br>No transactions found
                    </td>
                </tr>
            `;
        }
    }

    function displayHistoryPagination(currentPage, totalPages) {
        const paginationList = document.getElementById('historyPaginationList');
        paginationList.innerHTML = '';
        
        // Previous button
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevLi.innerHTML = `
            <a class="page-link" href="#" onclick="loadTransactionHistory(${currentPage - 1}); return false;">
                Previous
            </a>
        `;
        paginationList.appendChild(prevLi);
        
        // Page numbers
        const startPage = Math.max(1, currentPage - 2);
        const endPage = Math.min(totalPages, currentPage + 2);
        
        for (let i = startPage; i <= endPage; i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === currentPage ? 'active' : ''}`;
            li.innerHTML = `
                <a class="page-link" href="#" onclick="loadTransactionHistory(${i}); return false;">
                    ${i}
                </a>
            `;
            paginationList.appendChild(li);
        }
        
        // Next button
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextLi.innerHTML = `
            <a class="page-link" href="#" onclick="loadTransactionHistory(${currentPage + 1}); return false;">
                Next
            </a>
        `;
        paginationList.appendChild(nextLi);
    }

    function showHistoryError(message) {
        const tbody = document.getElementById('transactionHistoryBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center text-danger py-4">
                    <i class="fa-solid fa-exclamation-triangle fa-2x mb-2"></i>
                    <br>${message}
                </td>
            </tr>
        `;
    }
</script>
