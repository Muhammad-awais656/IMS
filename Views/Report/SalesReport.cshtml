@model IMS.Models.ReportsViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
}
@* <div class="container mt-4"> *@
<div class="card shadow-sm">
    <div class="card-header bg-success text-white">
        <h2 class="mb-0" style="text-align:center">Sales Report</h2>
    </div>
    <div class="card-body">
        <div class="justify-content-md-start align-items-md-start mb-3">
            <div class="mt-4 text-end">


                <a href="#" id="exportExcelBtn" class="btn btn-success me-2">
                    <i class="fa fa-file-excel"></i> Export Excel
                </a>

                <a href="#" id="exportPdfBtn" class="btn btn-danger">
                    <i class="fa fa-file-pdf"></i> Export PDF
                </a>
                <a onclick="printContent('PrintData');" class="btn btn-success float-end"> Print</a>
            </div>
            <div>
                <form id="filterForm" style="border:ridge; background: aliceblue;"
                      asp-action="SalesReport"
                      asp-controller="Report"
                      asp-route-custId="@ViewData["custId"]"
                      asp-route-FromDate="@ViewData["FromDate"]"
                      asp-route-ToDate="@ViewData["ToDate"]"
                      method="get">

                    <div class="row mb-3">

                        <div class="col-md-3">
                            <label>Customer :</label>
                            @Html.DropDownList("SalesReportsFilters.CustomerIdFk", ViewBag.Customers as IEnumerable<SelectListItem>, "<-- Select Customer -->", new { @class = "form-control", @id = "SalesReportsFilters.CustomerIdFk" })
                        </div>
                        <div class="col-md-3">
                            <label>Sale date from :</label>
                            @* <input type="date" name="FromDate" value="@Context.Request.Query["FromDate"]" class="form-control" /> *@
                            <input type="date" name="FromDate"
                                   value="@(string.IsNullOrEmpty(Context.Request.Query["FromDate"])
                                                                                      ? DateTime.Now.ToString("yyyy-MM-dd")
                                                                                      : Context.Request.Query["FromDate"].ToString())"
                                   class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label>Sale date to :</label>
                            @* <input type="date" name="ToDate" value="@Context.Request.Query["ToDate"]" class="form-control" /> *@
                            <input type="date" name="ToDate"
                                   value="@(string.IsNullOrEmpty(Context.Request.Query["ToDate"])
                                                                                                                         ? DateTime.Now.ToString("yyyy-MM-dd")
                                                                                                                                                            : Context.Request.Query["ToDate"].ToString())"
                                   class="form-control" />
                        </div>


                        <div class="col">
                            <button type="submit" class="btn btn-primary">
                                <i class="fa-solid fa-magnifying-glass"></i>
                            </button>
                            <button type="submit" class="btn btn-info">
                                Refresh
                            </button>
                        
                        </div>

                        



                    </div>




                </form>
            </div>




        </div>
        <div class="table-responsive" id="printArea">
            <table class="table table-striped table-bordered custom-table">
                <thead>
                    <tr>
                        <th>Sale Id</th>
                        <th>Customer Name</th>
                        <th>Bill #</th>
                        <th>Sale date</th>
                        <th>Total Amount</th>
                        <th>Discount Amount</th>
                        <th>Paid Amnt</th>
                        <th>Total Payable</th>
                        <th>Description</th>




                    </tr>
                </thead>
                <tbody>
                    @if (Model.SalesList.Any())
                    {
                        @foreach (var item in Model.SalesList)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.SaleId)</td>
                                <td>@Html.DisplayFor(modelitem => item.CustomerName)</td>
                                <td>@Html.DisplayFor(modelitem => item.BillNumber)</td>

                                <td>@item.SaleDate.ToString("dd/MM/yyyy")</td>
                                <td>@Html.DisplayFor(modelitem => item.TotalAmount)</td>
                                <td>@Html.DisplayFor(modelItem => item.DiscountAmount)</td>
                                <td>@Html.DisplayFor(modelItem => item.TotalReceivedAmount)</td>
                                <td>@Html.DisplayFor(modelItem => item.TotalDueAmount)</td>






                            </tr>
                        }


                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No Data found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <span class="text-muted">Total Items : @Model.TotalCount | Showing @Model.PageSize Items per page</span>
            <div class="end-0">
                <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="20" selected="@(Model.PageSize == 20)">20</option>
                    <option value="30" selected="@(Model.PageSize == 30)">30</option>
                </select>
            </div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="User pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="SalesReport" asp-route-pageNumber="1"
                               asp-route-pageSize="@Model.PageSize">First</a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="SalesReport" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                        </li>
                        @{
                            int startPage = Math.Max(1, Model.CurrentPage - 1);
                            int endPage = Math.Min(Model.TotalPages, startPage + 2);
                            if (endPage - startPage < 2)
                            {
                                startPage = Math.Max(1, endPage - 2);
                            }

                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-action="SalesReport" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="SalesReport" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="SalesReport" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
    @*  </div> *@
</div>

@section Scripts {
    <script>


        function SearchNameChange(){
            debugger;

            const search = document.querySelector('input[name="searchUsername"]').value;
            window.location.href = '@Url.Action("SalesReport", "Report")'
                + '?pageNumber=1&pageSize=' + select.value
                + (search ? '&searchUsername=' + encodeURIComponent(search) : '');
        }


           function changePageSize(select) {
              
            var custId = document.getElementById("SalesReportsFilters.CustomerIdFk").value;
            var fromDate = document.querySelector("input[name='FromDate']").value;
            var toDate = document.querySelector("input[name='ToDate']").value;

            var url = `/Report/SalesReport?pageNumber=1&custId=${custId}&pageSize=${select.value}&${custId}&FromDate=${fromDate}&ToDate=${toDate}`;
            window.location.href = url;
            
        }


          
     


    </script>
    <script>
          function printContent(divName) {
            
            window.print();
        }
        document.getElementById("exportExcelBtn").addEventListener("click", function () {
            var custId = document.getElementById("SalesReportsFilters.CustomerIdFk").value;
            var fromDate = document.querySelector("input[name='FromDate']").value;
            var toDate = document.querySelector("input[name='ToDate']").value;

            var url = `/Report/ExportExcel?custId=${custId}&FromDate=${fromDate}&ToDate=${toDate}`;
            window.location.href = url;
        });

        document.getElementById("exportPdfBtn").addEventListener("click", function () {
            var custId = document.getElementById("SalesReportsFilters.CustomerIdFk").value;
            var fromDate = document.querySelector("input[name='FromDate']").value;
            var toDate = document.querySelector("input[name='ToDate']").value;

            var url = `/Report/ExportPdf?custId=${custId}&FromDate=${fromDate}&ToDate=${toDate}`;
            window.location.href = url;
        });

           

    </script>
}
