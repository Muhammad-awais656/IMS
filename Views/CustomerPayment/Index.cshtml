@model IMS.Models.CustomerPaymentViewModel
@using System.Linq

@{
    ViewData["Title"] = "Customer Payments";
}

<style>
    /* Enhanced Filter Section Styles */
    .card-header.bg-gradient {
        border: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .card.shadow-sm {
        border: none;
        border-radius: 12px;
        overflow: hidden;
    }
    
    .card-body.bg-light {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%) !important;
        border-radius: 0 0 12px 12px;
    }
    
    .form-label {
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }
    
    .form-control, .form-select {
        border-radius: 8px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        transform: translateY(-1px);
    }
    
    .btn {
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }
    
    .btn-outline-secondary {
        border-color: #6c757d;
        color: #6c757d;
    }
    
    .btn-outline-secondary:hover {
        background: #6c757d;
        border-color: #6c757d;
    }
    
    .btn-outline-warning {
        border-color: #ffc107;
        color: #ffc107;
    }
    
    .btn-outline-warning:hover {
        background: #ffc107;
        border-color: #ffc107;
        color: #000;
    }
    
    /* Collapse Animation */
    .collapse {
        transition: all 0.3s ease;
    }
    
    /* Icon Colors */
    .text-primary {
        color: #667eea !important;
    }
    
    /* Loading Spinner Styles */
    .spinner-border {
        animation: spinner-border 0.75s linear infinite;
    }
    
    @@keyframes spinner-border {
        to { transform: rotate(360deg); }
    }
    
    .loading-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .d-flex.gap-2 {
            flex-direction: column;
            gap: 0.5rem !important;
        }
        
        .btn {
            width: 100%;
        }
    }
</style>


    <div class="card shadow-sm">
        <!-- Header -->
        <div class="card-header bg-success text-white">
            <h2 class="mb-0" style="text-align:center">Customer Payments</h2>
        </div>

        <div class="card-body">
            <!-- Toolbar -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <a asp-action="Create" class="btn btn-success me-2">
                        <i class="fa-solid fa-plus me-1"></i>Add New Payment
                    </a>
                </div>
            </div>

            <!-- Advanced Filters -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-gradient" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="d-flex align-items-center justify-content-between">
                        <h6 class="mb-0">
                        <i class="fa-solid fa-filter me-2"></i>Advanced Filters
                        </h6>
                        <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="true" aria-controls="filterCollapse">
                            <i class="fa-solid fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="filterCollapse">
                    <div class="card-body bg-light">
                        <form asp-action="Index" method="get" id="filterForm">
                            <!-- Hidden inputs to capture Kendo ComboBox values -->
                            <input type="hidden" name="customerId" id="hiddenCustomerId" value="@Context.Request.Query["customerId"]" />
                            <input type="hidden" name="saleId" id="hiddenSaleId" value="@Context.Request.Query["saleId"]" />
                            
                            <!-- Filter Row 1 -->
                            <div class="row g-3 mb-3">
                                <div class="col-lg-3 col-md-6">
                                    <label class="form-label fw-semibold text-dark">
                                        <i class="fa-solid fa-user me-1 text-primary"></i>Customer
                                    </label>
                                    <input id="customerFilterSelect" style="width: 100%;" />
                                </div>
                                <div class="col-lg-3 col-md-6">
                                    <label class="form-label fw-semibold text-dark">
                                        <i class="fa-solid fa-receipt me-1 text-primary"></i>Bill Number
                                    </label>
                                    <input id="billFilterSelect" style="width: 100%;" />
                            </div>
                                <div class="col-lg-3 col-md-6">
                                    <label class="form-label fw-semibold text-dark">
                                        <i class="fa-solid fa-calendar me-1 text-primary"></i>Payment Date From
                                    </label>
                                    <input type="date" name="paymentDateFrom" id="paymentDateFrom" class="form-control" value="@(Context.Request.Query["paymentDateFrom"].FirstOrDefault() ?? DateTime.Now.ToString("yyyy-MM-dd"))" />
                            </div>
                                <div class="col-lg-3 col-md-6">
                                    <label class="form-label fw-semibold text-dark">
                                        <i class="fa-solid fa-calendar me-1 text-primary"></i>Payment Date To
                                    </label>
                                    <input type="date" name="paymentDateTo" id="paymentDateTo" class="form-control" value="@(Context.Request.Query["paymentDateTo"].FirstOrDefault() ?? DateTime.Now.ToString("yyyy-MM-dd"))" />
                            </div>
                            </div>
                            
                            <!-- Action Buttons Row -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex justify-content-center gap-2">
                                        <button type="submit" class="btn btn-primary px-4 py-2">
                                            <i class="fa-solid fa-search me-2"></i>Search Payments
                                        </button>
                                        <a asp-action="Index" class="btn btn-outline-secondary px-4 py-2" title="Reset Filters">
                                            <i class="fa-solid fa-refresh me-2"></i>Reset
                                        </a>
                                        <button type="button" class="btn btn-outline-warning px-4 py-2" onclick="clearAllFilters()" title="Clear All Fields">
                                            <i class="fa-solid fa-times me-2"></i>Clear All
                                </button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

           

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-striped table-bordered custom-table">
                    <thead>
                        <tr>
                            <th>Payment id</th>
                            <th>Customer name</th>
                            <th>Bill number</th>
                            <th>Amount</th>
                            <th>Payment date</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.PaymentsList != null && Model.PaymentsList.Any())
                        {
                            foreach (var payment in Model.PaymentsList)
                            {
                                <tr>
                                    <td>@payment.PaymentId</td>
                                    <td>@payment.CustomerName</td>
                                    <td>@payment.BillNumber</td>
                                    <td>@payment.PaymentAmount.ToString("N3")</td>
                                    <td>@payment.PaymentDate.ToString("M/d/yyyy h:mm:ss tt")</td>
                                    <td title="@payment.Description">
                                        @(payment.Description?.Length > 30
                                                                        ? payment.Description.Substring(0, 30) + "..."
                                                                        : payment.Description)
                                    </td>
                                    <td class="table-actions text-nowrap">
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-info" title="View Details">
                                                <i class="fa-solid fa-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-warning" title="Edit Payment">
                                                <i class="fa-solid fa-edit"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-danger" title="Delete Payment">
                                                <i class="fa-solid fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                        </tr>
                                                }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No payments found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="d-flex align-items-center">
                    <span class="text-muted me-3">
                        <i class="fa-solid fa-info-circle me-1"></i>
                        Total: <strong>@Model.TotalCount</strong> payments | Showing <strong>@Model.PageSize</strong> per page
                    </span>
                </div>
                <!-- Page Size -->
                <div class="d-flex justify-content-end align-items-center mb-3">
                    <div>
                        <label for="pageSize" class="form-label me-2">Items Per Page:</label>
                        <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                            <option value="5" selected="@(Model.PageSize == 5)">5</option>
                            <option value="10" selected="@(Model.PageSize == 10)">10</option>
                            <option value="25" selected="@(Model.PageSize == 25)">25</option>
                            <option value="50" selected="@(Model.PageSize == 50)">50</option>
                        </select>
                    </div>
                </div>
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Payments pagination">
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="1" asp-route-pageSize="@Model.PageSize" 
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-angles-left"></i>
                                </a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-chevron-left"></i>
                                </a>
                            </li>
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, startPage + 4);
                                if (endPage - startPage < 4)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize"
                                       asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                       asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                       asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-chevron-right"></i>
                                </a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-angles-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>


@section Scripts {
    <script>
        function changePageSize(select) {
            // Show loading spinner
            showTableLoader();
            
            const customerCombo = $("#customerFilterSelect").data("kendoComboBox");
            const billCombo = $("#billFilterSelect").data("kendoComboBox");
            const customerId = customerCombo ? customerCombo.value() : '';
            const saleId = billCombo ? billCombo.value() : '';
            const paymentDateFrom = document.getElementById("paymentDateFrom").value;
            const paymentDateTo = document.getElementById("paymentDateTo").value;

            const params = new URLSearchParams();
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            if (customerId) params.set('customerId', customerId);
            if (saleId) params.set('saleId', saleId);
            if (paymentDateFrom) params.set('paymentDateFrom', paymentDateFrom);
            if (paymentDateTo) params.set('paymentDateTo', paymentDateTo);
            
            window.location.href = '@Url.Action("Index", "CustomerPayment")' + '?' + params.toString();
        }

        function SearchCustomerChange() {
            // Show loading spinner
            showTableLoader();
            
            const pageSize = document.getElementById("pageSize").value;
            const customerCombo = $("#customerFilterSelect").data("kendoComboBox");
            const billCombo = $("#billFilterSelect").data("kendoComboBox");
            const customerId = customerCombo ? customerCombo.value() : '';
            const saleId = billCombo ? billCombo.value() : '';
            const paymentDateFrom = document.getElementById("paymentDateFrom").value;
            const paymentDateTo = document.getElementById("paymentDateTo").value;
            
            const params = new URLSearchParams();
            params.set('pageNumber', '1');
            params.set('pageSize', pageSize);
            if (customerId) params.set('customerId', customerId);
            if (saleId) params.set('saleId', saleId);
            if (paymentDateFrom) params.set('paymentDateFrom', paymentDateFrom);
            if (paymentDateTo) params.set('paymentDateTo', paymentDateTo);
            
            window.location.href = '@Url.Action("Index", "CustomerPayment")' + '?' + params.toString();
        }

        // Loading Functions
        function showTableLoader() {
            const tableContainer = document.querySelector('.table-responsive');
            if (tableContainer) {
                tableContainer.innerHTML = `
                    <div class="d-flex justify-content-center align-items-center" style="height: 500px;">
                        <div class="loading-container text-center">
                            <div class="spinner-border text-primary" role="status" style="width: 4rem; height: 4rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-4">
                                <h4 class="text-primary mb-2">
                                    <i class="fa-solid fa-credit-card me-2"></i>Loading Payments
                                </h4>
                                <p class="text-muted mb-0">Please wait while we fetch your payment data...</p>
                            </div>
                        </div>
                    </div>
                `;
            }
        }

        function hideTableLoader() {
            // This will be called when the page loads to hide any existing loader
            const loader = document.querySelector('.spinner-border');
            if (loader) {
                loader.closest('.d-flex').remove();
            }
        }

        // Initialize Kendo UI ComboBoxes
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Customer ComboBox
            $("#customerFilterSelect").kendoComboBox({
                placeholder: "Select Customer...",
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                suggest: true,
                dataSource: [
                    { value: "", text: "All Customers" }
                    @if (Model.CustomerList != null)
                    {
                        @foreach (var customer in Model.CustomerList)
                        {
                            <text>,</text>
                            <text>{ value: "@customer.CustomerId", text: "@customer.CustomerName" }</text>
                        }
                    }
                ],
                value: "@Context.Request.Query["customerId"]",
                change: function() {
                    const customerId = this.value();
                    const billCombo = $("#billFilterSelect").data("kendoComboBox");
                    
                    // Update hidden input
                    document.getElementById('hiddenCustomerId').value = customerId || '';
                    
                    if (billCombo) {
                        // Clear bills when customer changes
                        billCombo.dataSource.data([]);
                        billCombo.value("");
                        document.getElementById('hiddenSaleId').value = '';
                    
                    if (customerId) {
                        // Show loading state
                            billCombo.dataSource.add({ value: "", text: "Loading bills..." });
                            billCombo.enable(false);
                        
                        // Fetch customer bills
                        fetch('@Url.Action("GetCustomerBills", "CustomerPayment")' + '?customerId=' + customerId)
                            .then(response => response.json())
                            .then(data => {
                                    billCombo.dataSource.data([]);
                                
                                if (data.success && data.bills && data.bills.length > 0) {
                                        billCombo.dataSource.add({ value: "", text: "All Bills" });
                                    data.bills.forEach(function(bill) {
                                            billCombo.dataSource.add({ value: bill.saleId, text: bill.billNumber });
                                    });
                                } else {
                                        billCombo.dataSource.add({ value: "", text: "No bills found for this customer" });
                                }
                                
                                    billCombo.enable(true);
                            })
                            .catch(error => {
                                console.error('Error fetching customer bills:', error);
                                    billCombo.dataSource.data([]);
                                    billCombo.dataSource.add({ value: "", text: "Error loading bills" });
                                    billCombo.enable(true);
                                });
                        }
                    }
                }
            });

            // Initialize Bill ComboBox
            $("#billFilterSelect").kendoComboBox({
                placeholder: "Select Bill...",
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                suggest: true,
                dataSource: [
                    { value: "", text: "All Bills" }
                    @if (Model.SalesList != null)
                    {
                        @foreach (var sale in Model.SalesList)
                        {
                            <text>,</text>
                            <text>{ value: "@sale.SaleId", text: "@sale.BillNumber" }</text>
                        }
                    }
                ],
                value: "@Context.Request.Query["saleId"]",
                change: function() {
                    const saleId = this.value();
                    // Update hidden input
                    document.getElementById('hiddenSaleId').value = saleId || '';
                }
            });

            // Auto-submit search on Enter key
            const searchInput = document.querySelector('input[name="searchCustomer"]');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        SearchCustomerChange();
                    }
                });
            }

            // Set default dates to today if not already set
            const today = new Date().toISOString().split('T')[0];
            const paymentDateFromInput = document.getElementById('paymentDateFrom');
            const paymentDateToInput = document.getElementById('paymentDateTo');
            
            if (paymentDateFromInput && !paymentDateFromInput.value) {
                paymentDateFromInput.value = today;
            }
            if (paymentDateToInput && !paymentDateToInput.value) {
                paymentDateToInput.value = today;
            }

            // Enhanced Filter Collapse Functionality
            $('#filterCollapse').on('show.bs.collapse', function () {
                $('[data-bs-target="#filterCollapse"] i').removeClass('fa-chevron-down').addClass('fa-chevron-up');
            });
            
            $('#filterCollapse').on('hide.bs.collapse', function () {
                $('[data-bs-target="#filterCollapse"] i').removeClass('fa-chevron-up').addClass('fa-chevron-down');
            });

            // Add smooth focus animations to form controls
            $('.form-control, .form-select').on('focus', function() {
                $(this).closest('.col-lg-3, .col-md-6').addClass('animate__animated animate__pulse');
            }).on('blur', function() {
                $(this).closest('.col-lg-3, .col-md-6').removeClass('animate__animated animate__pulse');
            });

            // Add loading state to search button and show table loader
            $('form').on('submit', function() {
                // Update hidden inputs with current Kendo ComboBox values before submission
                const customerCombo = $("#customerFilterSelect").data("kendoComboBox");
                const billCombo = $("#billFilterSelect").data("kendoComboBox");
                
                if (customerCombo) {
                    document.getElementById('hiddenCustomerId').value = customerCombo.value() || '';
                }
                if (billCombo) {
                    document.getElementById('hiddenSaleId').value = billCombo.value() || '';
                }
                
                const submitBtn = $(this).find('button[type="submit"]');
                submitBtn.prop('disabled', true);
                submitBtn.html('<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...');
                
                // Show table loader
                showTableLoader();
            });

            // Add loading to pagination links
            $('.pagination a').on('click', function() {
                showTableLoader();
            });
        });

        // Clear All Filters Function
        function clearAllFilters() {
            // Show loading spinner
            showTableLoader();
            
            // Clear Kendo ComboBoxes
            const customerCombo = $("#customerFilterSelect").data("kendoComboBox");
            const billCombo = $("#billFilterSelect").data("kendoComboBox");
            
            if (customerCombo) {
                customerCombo.value("");
                document.getElementById('hiddenCustomerId').value = '';
            }
            if (billCombo) {
                billCombo.value("");
                document.getElementById('hiddenSaleId').value = '';
            }
            
            // Reset dates to today
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('paymentDateFrom').value = today;
            document.getElementById('paymentDateTo').value = today;
            
            // Submit the form to refresh the page
            document.querySelector('form').submit();
        }
    </script>
}
