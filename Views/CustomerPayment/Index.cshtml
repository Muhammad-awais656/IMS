@model IMS.Models.CustomerPaymentViewModel
@using System.Linq

@{
    ViewData["Title"] = "Customer Payments";
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <!-- Header -->
        <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none;">
            <h2 class="mb-0" style="text-align:center">Customer Payments</h2>
        </div>

        <div class="card-body">
            <!-- Toolbar -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <a asp-action="Create" class="btn btn-success me-2">
                        <i class="fa-solid fa-plus me-1"></i>Add New Payment
                    </a>
                </div>

                <!-- Search and Filters -->
                <div class="d-flex align-items-center gap-2">
                    <form asp-action="Index" asp-controller="CustomerPayment" method="get" class="d-flex align-items-center gap-2">
                        <input type="text"
                               name="searchCustomer"
                               value="@Context.Request.Query["searchCustomer"]"
                               class="form-control"
                               placeholder="Search by customer name..." 
                               style="width: 200px;" />
                        <button type="submit" class="btn btn-primary">
                            <i class="fa-solid fa-magnifying-glass"></i>
                        </button>
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="fa-solid fa-refresh"></i>
                        </a>
                    </form>
                </div>
            </div>

            <!-- Advanced Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fa-solid fa-filter me-2"></i>Advanced Filters
                        <button class="btn btn-sm btn-outline-primary float-end" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse">
                            <i class="fa-solid fa-chevron-down"></i>
                        </button>
                    </h6>
                </div>
                <div class="collapse" id="filterCollapse">
                    <div class="card-body">
                        <form asp-action="Index" method="get" class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label">Customer:</label>
                                <select name="customerId" id="customerId" class="form-select">
                                    <option value="">All Customers</option>
                                    @if (Model.CustomerList != null)
                                    {
                                        @foreach (var customer in Model.CustomerList)
                                        {
                                            <option value="@customer.CustomerId" selected="@(Context.Request.Query["customerId"] == customer.CustomerId.ToString())">
                                                @customer.CustomerName
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Bill Number:</label>
                                <select name="saleId" id="saleId" class="form-select">
                                    <option value="">All Bills</option>
                                    @if (Model.SalesList != null)
                                    {
                                        @foreach (var sale in Model.SalesList)
                                        {
                                            <option value="@sale.SaleId" selected="@(Context.Request.Query["saleId"] == sale.SaleId.ToString())">
                                                @sale.BillNumber
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Payment Date From:</label>
                                <input type="date" name="paymentDateFrom" class="form-control" value="@Context.Request.Query["paymentDateFrom"]" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Payment Date To:</label>
                                <input type="date" name="paymentDateTo" class="form-control" value="@Context.Request.Query["paymentDateTo"]" />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary w-100">
                                    <i class="fa-solid fa-search"></i> Filter
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Page Size -->
            <div class="d-flex justify-content-end align-items-center mb-3">
                <div>
                    <label for="pageSize" class="form-label me-2">Items Per Page:</label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                    </select>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table table-striped table-bordered custom-table">
                    <thead>
                        <tr>
                            <th>Payment id</th>
                            <th>Customer name</th>
                            <th>Bill number</th>
                            <th>Amount</th>
                            <th>Payment date</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.PaymentsList != null && Model.PaymentsList.Any())
                        {
                            foreach (var payment in Model.PaymentsList)
                            {
                                <tr>
                                    <td>@payment.PaymentId</td>
                                    <td>@payment.CustomerName</td>
                                    <td>@payment.BillNumber</td>
                                    <td>@payment.PaymentAmount.ToString("N3")</td>
                                    <td>@payment.PaymentDate.ToString("M/d/yyyy h:mm:ss tt")</td>
                                    <td title="@payment.Description">
                                        @(payment.Description?.Length > 30
                                                                        ? payment.Description.Substring(0, 30) + "..."
                                                                        : payment.Description)
                                    </td>
                                    <td class="table-actions text-nowrap">
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-info" title="View Details">
                                                <i class="fa-solid fa-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-warning" title="Edit Payment">
                                                <i class="fa-solid fa-edit"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@payment.PaymentId" class="btn btn-sm btn-outline-danger" title="Delete Payment">
                                                <i class="fa-solid fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                        </tr>
                                                }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">No payments found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="d-flex align-items-center">
                    <span class="text-muted me-3">
                        <i class="fa-solid fa-info-circle me-1"></i>
                        Total: <strong>@Model.TotalCount</strong> payments | Showing <strong>@Model.PageSize</strong> per page
                    </span>
                </div>
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Payments pagination">
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="1" asp-route-pageSize="@Model.PageSize" 
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-angles-left"></i>
                                </a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-chevron-left"></i>
                                </a>
                            </li>
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, startPage + 4);
                                if (endPage - startPage < 4)
                                {
                                    startPage = Math.Max(1, endPage - 4);
                                }
                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize"
                                       asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                       asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                       asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-chevron-right"></i>
                                </a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchCustomer="@Context.Request.Query["searchCustomer"]" asp-route-customerId="@Context.Request.Query["customerId"]" 
                                   asp-route-saleId="@Context.Request.Query["saleId"]" asp-route-paymentDateFrom="@Context.Request.Query["paymentDateFrom"]" 
                                   asp-route-paymentDateTo="@Context.Request.Query["paymentDateTo"]">
                                    <i class="fa-solid fa-angles-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function changePageSize(select) {
            const searchCustomer = document.querySelector('input[name="searchCustomer"]').value;
            const customerId = document.getElementById("customerId").value;
            const saleId = document.getElementById("saleId").value;
            const paymentDateFrom = document.querySelector('input[name="paymentDateFrom"]').value;
            const paymentDateTo = document.querySelector('input[name="paymentDateTo"]').value;

            const params = new URLSearchParams();
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            if (searchCustomer) params.set('searchCustomer', searchCustomer);
            if (customerId) params.set('customerId', customerId);
            if (saleId) params.set('saleId', saleId);
            if (paymentDateFrom) params.set('paymentDateFrom', paymentDateFrom);
            if (paymentDateTo) params.set('paymentDateTo', paymentDateTo);
            
            window.location.href = '@Url.Action("Index", "CustomerPayment")' + '?' + params.toString();
        }

        function SearchCustomerChange() {
            const search = document.querySelector('input[name="searchCustomer"]').value;
            const pageSize = document.getElementById("pageSize").value;
            const customerId = document.getElementById("customerId").value;
            const saleId = document.getElementById("saleId").value;
            const paymentDateFrom = document.querySelector('input[name="paymentDateFrom"]').value;
            const paymentDateTo = document.querySelector('input[name="paymentDateTo"]').value;
            
            const params = new URLSearchParams();
            params.set('pageNumber', '1');
            params.set('pageSize', pageSize);
            if (search) params.set('searchCustomer', search);
            if (customerId) params.set('customerId', customerId);
            if (saleId) params.set('saleId', saleId);
            if (paymentDateFrom) params.set('paymentDateFrom', paymentDateFrom);
            if (paymentDateTo) params.set('paymentDateTo', paymentDateTo);
            
            window.location.href = '@Url.Action("Index", "CustomerPayment")' + '?' + params.toString();
        }

        // Handle customer change to populate bills
        document.addEventListener('DOMContentLoaded', function() {
            const customerSelect = document.getElementById('customerId');
            const saleSelect = document.getElementById('saleId');
            
            if (customerSelect) {
                customerSelect.addEventListener('change', function() {
                    const customerId = this.value;
                    
                    // Clear existing options except the first one
                    saleSelect.innerHTML = '<option value="">All Bills</option>';
                    
                    if (customerId) {
                        // Show loading state
                        saleSelect.innerHTML = '<option value="">Loading bills...</option>';
                        saleSelect.disabled = true;
                        
                        // Fetch customer bills
                        fetch('@Url.Action("GetCustomerBills", "CustomerPayment")' + '?customerId=' + customerId)
                            .then(response => response.json())
                            .then(data => {
                                saleSelect.innerHTML = '<option value="">All Bills</option>';
                                
                                if (data.success && data.bills && data.bills.length > 0) {
                                    data.bills.forEach(function(bill) {
                                        const option = document.createElement('option');
                                        option.value = bill.saleId;
                                        option.textContent = bill.billNumber;
                                        saleSelect.appendChild(option);
                                    });
                                } else {
                                    const option = document.createElement('option');
                                    option.value = '';
                                    option.textContent = 'No bills found for this customer';
                                    saleSelect.appendChild(option);
                                }
                                
                                saleSelect.disabled = false;
                            })
                            .catch(error => {
                                console.error('Error fetching customer bills:', error);
                                saleSelect.innerHTML = '<option value="">Error loading bills</option>';
                                saleSelect.disabled = false;
                            });
                    }
                });
            }

            // Auto-submit search on Enter key
            const searchInput = document.querySelector('input[name="searchCustomer"]');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        SearchCustomerChange();
                    }
                });
            }
        });
    </script>
}
