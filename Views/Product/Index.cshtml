@model IMS.Models.ProductViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
}

@* <div class="container mt-4"> *@
    <div class="card shadow-sm">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0" style="text-align:center">Product Management</h2>
        </div>
        <div class="card-body">
            <div class="justify-content-md-start align-items-md-start mb-3">
             @*    <div>
                    <a asp-action="Create" class="btn btn-success" style="margin:0">Create </a>
                </div> *@
                <div>
                    <form style="border:ridge; background: aliceblue;"
                          asp-action="Index"
                              asp-controller="Product"
                              asp-route-searchpName="@ViewData["searchpName"]"
                              asp-route-searchpCode="@ViewData["searchpCode"]"
                              asp-route-searchpFrom="@ViewData["searchpFrom"]"
                              asp-route-catId="@ViewData["catId"]"
                              asp-route-searchULabelId="@ViewData["searchULabelId"]"
                              asp-route-searchUMUTId="@ViewData["searchUMUTId"]"
                          method="get"
                          class="d-flex align-items-center gap-2">

                        <div class="row row-cols-1 row-cols-md-2 row-cols-md-4 g-4 mt-2">

                            <div class="col">
                                <label for="searchpName" class="form-label">Product Name:</label>
                                        <input type="text"
                                               id="searchpName"
                                               name="searchpName"
                                               value="@Context.Request.Query["searchpName"]"
                                       class="form-control"
                                               placeholder="Enter Product Name"
                                               onchange="SearchNameChange()" />
                                </div>
                                
                            <div class="col">
                                <label for="searchpCode" class="form-label">Product Code:</label>
                                        <input type="text"
                                               id="searchpCode"
                                               name="searchpCode"
                                               value="@Context.Request.Query["searchpCode"]"
                                       class="form-control"
                                               placeholder="Enter Product Code"
                                               onchange="SearchNameChange()" />
                                    </div>
                            <div class="col">
                                <label class="form-label">Price From :</label>
                                        <input type="number"
                                               name="searchpFrom"
                                               value="@Context.Request.Query["searchpFrom"]"
                                       class="form-control"
                                       placeholder="Enter Unit Price From" onchange="SearchNameChange()" />

                                    </div>
                            <div class="col">
                                <label  class="form-label">Price To :</label>
                                        <input type="number"
                                               id="priceTo"
                                               name="searchpTo"
                                               value="@Context.Request.Query["searchpTo"]"
                                       class="form-control"
                                       placeholder="Enter Unit Price To" onchange="SearchNameChange()" />

                                    </div>
                            <div class="col">
                                <label class="form-label">Category: </label>
                                <input id="categoryDropdown" name="catId" style="width: 100%;" />
                            </div>
                            
                            <div class="col">
                                <label class="form-label">Label: </label>
                                <input id="labelDropdown" name="searchULabelId" style="width: 100%;" />
                            </div>

                            <div class="col">
                                <label class="form-label">MU Type: </label>
                                <input id="mutDropdown" name="searchUMUTId" style="width: 100%;" />
                            </div>
                            

                            <div class="col">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </button>
                                <button type="submit" class="btn btn-info">
                                    Refresh
                                            </button>
                            <a asp-action="Create" class="btn btn-success">Create </a>
                            </div>
                      


                        </div>




                        </form>
                </div>
                


                
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-bordered custom-table">
                    <thead>
                        <tr>
                            <th>Product Id</th>
                            <th>Product Name</th>
                            <th>Product Code</th>
                            <th>Description</th>
                            <th>Unit Price</th>
                            <th>Category</th>
                            <th>Label</th>
                            <th>MU Type</th>
                            <th>Is Enabled</th>
                            
                            <th>Actions</th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Items!=null)
                        {
                            @foreach (var item in Model.Items)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductName)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductCode)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductDescription)</td>
                                    <td>@Html.DisplayFor(modelitem => item.Price)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CategoryName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.LabelName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.MeasuringUnitTypeName)</td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input @(item.IsEnabled ? "bg-success" : "bg-danger")"
                                                   type="checkbox"
                                                   @(item.IsEnabled ? "checked" : "")
                                                   disabled>
                                        </div>
                                    </td>



                                    <td class="table-actions">
                                        <a class="btn btn-primary btn-sm" asp-action="Edit" asp-route-id="@item.ProductId">Edit</a>
                                        <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                                    </td>


                                </tr>
                            }
                            
                            
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No users found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <span class="text-muted">Total Items : @Model.TotalCount | Showing @Model.PageSize Items per page</span>
            <div class="end-0">
                <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                    <option value="5" selected="@(Model.PageSize == 5)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                </select>
            </div>
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="User pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                                   asp-route-pageSize="@Model.PageSize" >First</a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                                   >Previous</a>
                            </li>
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 1);
                                int endPage = Math.Min(Model.TotalPages, startPage + 2);
                                if (endPage - startPage < 2)
                                {
                                    startPage = Math.Max(1, endPage - 2);
                                }

                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize" >@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" >Next</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" >Last</a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
   @*  </div> *@
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            console.log("Document ready - initializing Kendo comboboxes...");
            
            // Check if jQuery is loaded
            if (typeof $ === 'undefined') {
                console.error('jQuery is not loaded.');
                return;
            }
            
            // Check if Kendo UI is loaded
            if (typeof kendo === 'undefined') {
                console.error('Kendo UI is not loaded. Please check script references.');
                console.log('Available global objects:', Object.keys(window));
                return;
            }
            
            // Check if kendoComboBox function is available
            if (typeof $.fn.kendoComboBox === 'undefined') {
                console.error('kendoComboBox function is not available. Kendo UI combobox plugin not loaded.');
                console.log('Available jQuery plugins:', Object.keys($.fn).filter(key => key.startsWith('kendo')));
                return;
            }
            
            console.log('Kendo UI loaded successfully:', typeof kendo);
            console.log('jQuery version:', $.fn.jquery);
            console.log('kendoComboBox available:', typeof $.fn.kendoComboBox);

            // Initialize Kendo UI ComboBoxes with search functionality
            try {
                console.log("Initializing category dropdown...");
                $("#categoryDropdown").kendoComboBox({
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Product/GetCategories",
                                dataType: "json"
                            }
                        }
                    },
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select Category --",
                    value: "@Context.Request.Query["catId"]",
                    filter: "contains",
                    suggest: true,
                    minLength: 1
                });
                console.log("Category dropdown initialized successfully");

                console.log("Initializing label dropdown...");
                $("#labelDropdown").kendoComboBox({
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Product/GetLabels",
                                dataType: "json"
                            }
                        }
                    },
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select Label --",
                    value: "@Context.Request.Query["searchULabelId"]",
                    filter: "contains",
                    suggest: true,
                    minLength: 1
                });
                console.log("Label dropdown initialized successfully");

                console.log("Initializing measuring unit type dropdown...");
                $("#mutDropdown").kendoComboBox({
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Product/GetMeasuringUnitTypes",
                                dataType: "json"
                            }
                        }
                    },
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select MU Type --",
                    value: "@Context.Request.Query["searchUMUTId"]",
                    filter: "contains",
                    suggest: true,
                    minLength: 1
                });
                console.log("Measuring unit type dropdown initialized successfully");
                
                console.log("All Kendo comboboxes initialized successfully!");
                
            } catch (error) {
                console.error("Error initializing Kendo comboboxes:", error);
            }
        });

        // Fallback initialization if scripts load after document ready
        function initializeKendoComboboxes() {
            console.log("Fallback initialization called...");
            
            if (typeof kendo !== 'undefined' && typeof $ !== 'undefined' && typeof $.fn.kendoComboBox !== 'undefined') {
                console.log("Kendo, jQuery, and kendoComboBox available, initializing comboboxes...");
                
                try {
                    // Initialize category dropdown
                    if ($("#categoryDropdown").length > 0 && !$("#categoryDropdown").data("kendoComboBox")) {
                        $("#categoryDropdown").kendoComboBox({
                            dataSource: {
                                transport: {
                                    read: {
                                        url: "/Product/GetCategories",
                                        dataType: "json"
                                    }
                                }
                            },
                            dataTextField: "text",
                            dataValueField: "value",
                            placeholder: "-- Select Category --",
                            value: "@Context.Request.Query["catId"]",
                            filter: "contains",
                            suggest: true,
                            minLength: 1
                        });
                        console.log("Category dropdown initialized via fallback");
                    }

                    // Initialize label dropdown
                    if ($("#labelDropdown").length > 0 && !$("#labelDropdown").data("kendoComboBox")) {
                        $("#labelDropdown").kendoComboBox({
                            dataSource: {
                                transport: {
                                    read: {
                                        url: "/Product/GetLabels",
                                        dataType: "json"
                                    }
                                }
                            },
                            dataTextField: "text",
                            dataValueField: "value",
                            placeholder: "-- Select Label --",
                            value: "@Context.Request.Query["searchULabelId"]",
                            filter: "contains",
                            suggest: true,
                            minLength: 1
                        });
                        console.log("Label dropdown initialized via fallback");
                    }

                    // Initialize measuring unit type dropdown
                    if ($("#mutDropdown").length > 0 && !$("#mutDropdown").data("kendoComboBox")) {
                        $("#mutDropdown").kendoComboBox({
                            dataSource: {
                                transport: {
                                    read: {
                                        url: "/Product/GetMeasuringUnitTypes",
                                        dataType: "json"
                                    }
                                }
                            },
                            dataTextField: "text",
                            dataValueField: "value",
                            placeholder: "-- Select MU Type --",
                            value: "@Context.Request.Query["searchUMUTId"]",
                            filter: "contains",
                            suggest: true,
                            minLength: 1
                        });
                        console.log("Measuring unit type dropdown initialized via fallback");
                    }
                    
                } catch (error) {
                    console.error("Error in fallback initialization:", error);
                }
            } else {
                console.log("Kendo or jQuery not available yet, retrying in 500ms...");
                setTimeout(initializeKendoComboboxes, 500);
            }
        }

        // Try fallback initialization after a delay
        setTimeout(initializeKendoComboboxes, 1000);

        // Test function to check Kendo UI availability
        function testKendoAvailability() {
            console.log("=== Kendo UI Availability Test ===");
            console.log("jQuery available:", typeof $ !== 'undefined');
            console.log("Kendo available:", typeof kendo !== 'undefined');
            console.log("kendoComboBox available:", typeof $.fn.kendoComboBox !== 'undefined');
            
            if (typeof $ !== 'undefined') {
                console.log("jQuery version:", $.fn.jquery);
                console.log("Available Kendo plugins:", Object.keys($.fn).filter(key => key.startsWith('kendo')));
            }
            
            if (typeof kendo !== 'undefined') {
                console.log("Kendo version:", kendo.version);
                console.log("Available Kendo widgets:", Object.keys(kendo.ui || {}));
                
                // Check for specific Kendo components
                console.log("kendo.ui.ComboBox available:", typeof kendo.ui.ComboBox !== 'undefined');
                console.log("kendo.ui.DropDownList available:", typeof kendo.ui.DropDownList !== 'undefined');
                console.log("kendo.ui.Popup available:", typeof kendo.ui.Popup !== 'undefined');
                console.log("kendo.ui.List available:", typeof kendo.ui.List !== 'undefined');
            }
            
            console.log("=== End Test ===");
        }

        // Run test after a delay
        setTimeout(testKendoAvailability, 2000);

        // Function to verify all required scripts are loaded
        function verifyScriptLoading() {
            console.log("=== Script Loading Verification ===");
            
            const requiredScripts = [
                'jQuery',
                'kendo',
                'kendo.ui.ComboBox',
                'kendo.ui.DropDownList',
                'kendo.ui.Popup',
                'kendo.ui.List'
            ];
            
            let allLoaded = true;
            
            requiredScripts.forEach(script => {
                let isLoaded = false;
                switch(script) {
                    case 'jQuery':
                        isLoaded = typeof $ !== 'undefined';
                        break;
                    case 'kendo':
                        isLoaded = typeof kendo !== 'undefined';
                        break;
                    case 'kendo.ui.ComboBox':
                        isLoaded = typeof kendo !== 'undefined' && typeof kendo.ui.ComboBox !== 'undefined';
                        break;
                    case 'kendo.ui.DropDownList':
                        isLoaded = typeof kendo !== 'undefined' && typeof kendo.ui.DropDownList !== 'undefined';
                        break;
                    case 'kendo.ui.Popup':
                        isLoaded = typeof kendo !== 'undefined' && typeof kendo.ui.Popup !== 'undefined';
                        break;
                    case 'kendo.ui.List':
                        isLoaded = typeof kendo !== 'undefined' && typeof kendo.ui.List !== 'undefined';
                        break;
                }
                
                console.log(`${script}: ${isLoaded ? '✅' : '❌'}`);
                if (!isLoaded) allLoaded = false;
            });
            
            console.log(`All scripts loaded: ${allLoaded ? '✅' : '❌'}`);
            console.log("=== End Verification ===");
            
            return allLoaded;
        }

        // Run verification after a delay
        setTimeout(verifyScriptLoading, 3000);

        function SearchNameChange(){
            debugger;
            const search = document.querySelector('input[name="searchpName"]').value;
            const searchCode = document.querySelector('input[name="searchpCode"]').value;
            const searchFrom = document.querySelector('input[name="searchpFrom"]').value;
            const searchTo = document.querySelector('input[name="searchpTo"]').value;
            
            // Get Kendo combobox values
            const categoryValue = $("#categoryDropdown").data("kendoComboBox").value();
            const labelValue = $("#labelDropdown").data("kendoComboBox").value();
            const mutValue = $("#mutDropdown").data("kendoComboBox").value();
            
            const pageSize = document.getElementById('pageSize').value;
            
            let url = '@Url.Action("Index", "Product")' + '?pageNumber=1&pageSize=' + pageSize;
            
            if (search) url += '&searchpName=' + encodeURIComponent(search);
            if (searchCode) url += '&searchpCode=' + encodeURIComponent(searchCode);
            if (searchFrom) url += '&searchpFrom=' + encodeURIComponent(searchFrom);
            if (searchTo) url += '&searchpTo=' + encodeURIComponent(searchTo);
            if (categoryValue) url += '&catId=' + encodeURIComponent(categoryValue);
            if (labelValue) url += '&searchULabelId=' + encodeURIComponent(labelValue);
            if (mutValue) url += '&searchUMUTId=' + encodeURIComponent(mutValue);
            
            window.location.href = url;
        }

        function changePageSize(select) {
            debugger;
            const search = document.querySelector('input[name="searchpName"]').value;
            const searchCode = document.querySelector('input[name="searchpCode"]').value;
            const searchFrom = document.querySelector('input[name="searchpFrom"]').value;
            const searchTo = document.querySelector('input[name="searchpTo"]').value;
            
            // Get Kendo combobox values
            const categoryValue = $("#categoryDropdown").data("kendoComboBox").value();
            const labelValue = $("#labelDropdown").data("kendoComboBox").value();
            const mutValue = $("#mutDropdown").data("kendoComboBox").value();
            
            let url = '@Url.Action("Index", "Product")' + '?pageNumber=1&pageSize=' + select.value;
            
            if (search) url += '&searchpName=' + encodeURIComponent(search);
            if (searchCode) url += '&searchpCode=' + encodeURIComponent(searchCode);
            if (searchFrom) url += '&searchpFrom=' + encodeURIComponent(searchFrom);
            if (searchTo) url += '&searchpTo=' + encodeURIComponent(searchTo);
            if (categoryValue) url += '&catId=' + encodeURIComponent(categoryValue);
            if (labelValue) url += '&searchULabelId=' + encodeURIComponent(labelValue);
            if (mutValue) url += '&searchUMUTId=' + encodeURIComponent(mutValue);
            
            window.location.href = url;
        }
    </script>
}
