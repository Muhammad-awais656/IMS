@model IMS.Models.ProductViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
}

<link href="~/css/product-management.css" rel="stylesheet" />

@* <div class="container mt-4"> *@
    <div class="card shadow-sm">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0" style="text-align:center">Product Management</h2>
        </div>
        <div class="card-body">
            <!-- Enhanced Search Filters Section -->
            <div class="card mb-4 search-filters-card">
                <div class="card-header filter-header bg-transparent border-0 py-3">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="mb-0 text-primary fw-bold">
                            <i class="fa-solid fa-filter filter-icon me-2"></i>Advanced Search & Filters
                        </h5>
                        <button class="btn btn-sm btn-outline-primary collapse-btn" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="true">
                            <i class="fa-solid fa-chevron-down"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="filterCollapse">
                    <div class="card-body pt-0">
                        <form asp-action="Index"
                              asp-controller="Product"
                              asp-route-searchpName="@ViewData["searchpName"]"
                              asp-route-searchpCode="@ViewData["searchpCode"]"
                              asp-route-searchpFrom="@ViewData["searchpFrom"]"
                              asp-route-catId="@ViewData["catId"]"
                              asp-route-searchULabelId="@ViewData["searchULabelId"]"
                              asp-route-searchUMUTId="@ViewData["searchUMUTId"]"
                              method="get">
                            
                            <!-- Search Inputs Row -->
                            <div class="row g-3 mb-4">
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input type="text"
                                               id="searchpName"
                                               name="searchpName"
                                               value="@Context.Request.Query["searchpName"]"
                                               class="form-control border-0 shadow-sm"
                                               placeholder="Enter Product Name"
                                               onchange="SearchNameChange()" />
                                        <label for="searchpName" class="text-muted">
                                            <i class="fa-solid fa-box me-1"></i>Product Name
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input type="text"
                                               id="searchpCode"
                                               name="searchpCode"
                                               value="@Context.Request.Query["searchpCode"]"
                                               class="form-control border-0 shadow-sm"
                                               placeholder="Enter Product Code"
                                               onchange="SearchNameChange()" />
                                        <label for="searchpCode" class="text-muted">
                                            <i class="fa-solid fa-barcode me-1"></i>Product Code
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input type="number"
                                               name="searchpFrom"
                                               value="@Context.Request.Query["searchpFrom"]"
                                               class="form-control border-0 shadow-sm"
                                               placeholder="Enter Unit Price From"
                                               onchange="SearchNameChange()" />
                                        <label class="text-muted">
                                            <i class="fa-solid fa-dollar-sign me-1"></i>Price From
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-md-3">
                                    <div class="form-floating">
                                        <input type="number"
                                               id="priceTo"
                                               name="searchpTo"
                                               value="@Context.Request.Query["searchpTo"]"
                                               class="form-control border-0 shadow-sm"
                                               placeholder="Enter Unit Price To"
                                               onchange="SearchNameChange()" />
                                        <label class="text-muted">
                                            <i class="fa-solid fa-dollar-sign me-1"></i>Price To
                                        </label>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Filter Dropdowns Row -->
                            <div class="row g-3 mb-4">
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <select name="catId" asp-for="productFilters.CategoryId"
                                                asp-items="ViewBag.Categories"
                                                class="form-select border-0 shadow-sm">
                                            <option value="">-- Select Category --</option>
                                        </select>
                                        <label class="text-muted">
                                            <i class="fa-solid fa-tags me-1"></i>Category
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <select name="searchULabelId"
                                                asp-for="productFilters.LabelId"
                                                asp-items="ViewBag.Labels"
                                                class="form-select border-0 shadow-sm">
                                            <option value="">-- Select Label --</option>
                                        </select>
                                        <label class="text-muted">
                                            <i class="fa-solid fa-tag me-1"></i>Label
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <select name="searchUMUTId"
                                                asp-for="productFilters.MeasuringUnitTypeId"
                                                asp-items="ViewBag.MeasuringUnitTypes"
                                                class="form-select border-0 shadow-sm">
                                            <option value="">-- Select MU Type --</option>
                                        </select>
                                        <label class="text-muted">
                                            <i class="fa-solid fa-ruler me-1"></i>Measuring Unit Type
                                        </label>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Action Buttons Row -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex gap-2">
                                            <button type="submit" class="btn btn-primary btn-enhanced btn-search px-4 py-2">
                                                <i class="fa-solid fa-magnifying-glass me-2"></i>Search Products
                                            </button>
                                            <a asp-action="Index" class="btn btn-secondary btn-enhanced btn-reset px-4 py-2">
                                                <i class="fa-solid fa-refresh me-2"></i>Reset Filters
                                            </a>
                                        </div>
                                        <a asp-action="Create" class="btn btn-success btn-enhanced btn-create px-4 py-2">
                                            <i class="fa-solid fa-plus me-2"></i>Add New Product
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-bordered custom-table">
                    <thead>
                        <tr>
                            <th>Product Id</th>
                            <th>Product Name</th>
                            <th>Product Code</th>
                            <th>Description</th>
                            <th>Unit Price</th>
                            <th>Category</th>
                            <th>Label</th>
                            <th>MU Type</th>
                            <th>Is Enabled</th>
                            
                            <th>Actions</th>


                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Items!=null)
                        {
                            @foreach (var item in Model.Items)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductName)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductCode)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductDescription)</td>
                                    <td>@Html.DisplayFor(modelitem => item.Price)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CategoryName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.LabelName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.MeasuringUnitTypeName)</td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input @(item.IsEnabled ? "bg-success" : "bg-danger")"
                                                   type="checkbox"
                                                   @(item.IsEnabled ? "checked" : "")
                                                   disabled>
                                        </div>
                                    </td>



                                    <td class="table-actions">
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@item.ProductId" class="btn btn-sm btn-outline-info" title="View Details">
                                                <i class="fa-solid fa-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@item.ProductId" class="btn btn-sm btn-outline-warning" title="Edit Product">
                                                <i class="fa-solid fa-edit"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.ProductId" class="btn btn-sm btn-outline-danger" title="Delete Product">
                                                <i class="fa-solid fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>


                                </tr>
                            }
                            
                            
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No users found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <span class="text-muted">Total Items : @Model.TotalCount | Showing @Model.PageSize Items per page</span>
            <div class="end-0">
                <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                    <option value="5" selected="@(Model.PageSize == 5)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                </select>
            </div>
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="User pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                                   asp-route-pageSize="@Model.PageSize" >First</a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                                   >Previous</a>
                            </li>
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 1);
                                int endPage = Math.Min(Model.TotalPages, startPage + 2);
                                if (endPage - startPage < 2)
                                {
                                    startPage = Math.Max(1, endPage - 2);
                                }

                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize" >@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" >Next</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" >Last</a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
   @*  </div> *@
</div>

@section Scripts {
    <script>
        // Enhanced Product Management JavaScript
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeProductManagement();
        });

        function initializeProductManagement() {
            // Add loading states to buttons
            addLoadingStates();
            
            // Add smooth animations
            addSmoothAnimations();
            
            // Add form validation feedback
            addFormValidation();
        }

        function addLoadingStates() {
            const searchBtn = document.querySelector('.btn-search');
            const resetBtn = document.querySelector('.btn-reset');
            
            if (searchBtn) {
                searchBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...';
                });
            }
            
            if (resetBtn) {
                resetBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Resetting...';
                });
            }
        }

        function addSmoothAnimations() {
            // Add hover effects to form elements
            const formElements = document.querySelectorAll('.form-floating');
            formElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.transition = 'transform 0.3s ease';
                });
                
                element.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        }

        function addFormValidation() {
            const inputs = document.querySelectorAll('.form-control, .form-select');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.remove('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        function SearchNameChange() {
            // Add loading state
            const searchBtn = document.querySelector('.btn-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', document.getElementById('pageSize')?.value || '10');
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Product")' + '?' + params.toString();
        }

        function changePageSize(select) {
            // Add loading state
            const searchBtn = document.querySelector('.btn-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get current form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Product")' + '?' + params.toString();
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + Enter to search
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                const searchBtn = document.querySelector('.btn-search');
                if (searchBtn) {
                    searchBtn.click();
                }
            }
            
            // Escape to reset
            if (e.key === 'Escape') {
                const resetBtn = document.querySelector('.btn-reset');
                if (resetBtn) {
                    resetBtn.click();
                }
            }
        });

        // Add tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}
