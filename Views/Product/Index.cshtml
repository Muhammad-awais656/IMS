@* @model IMS.Models.ProductViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0" style="text-align:center">Products</h2>
        </div>
        <div class="card-body">
            <div class="d-flex justify-content-between mb-3">
                <a asp-action="Create" class="btn btn-success">Create New Product</a>
                <form asp-action="Index" asp-controller="Product" asp-route-searchUsername="@ViewData["searchUsername"]" method="get" class="d-flex gap-2">
                    <div class="row-cols-3">
                        <label class="col-form-label">Product Name:</label>
                        <input type="text"
                               name="searchUsername"
                               value="@Context.Request.Query["searchUsername"]"
                               class="form-control"
                               placeholder="Enter user name" onchange="SearchNameChange" /> 
                    </div>
                    
                    <div class="col-md-3">
                        <label for="@Model.productFilters.CategoryId" class="form-label">Category</label>
                        <select asp-for="@Model.productFilters.CategoryId"
                                asp-items="ViewBag.Categories"
                                class="form-control">
                            <option value=""><-- Select Category --></></option>
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </button>
                    <button type="submit" class="btn btn-info">
                        Refresh
                    </button>

                </form>


                <div>
                    <label for="pageSize" class="form-label me-2">Items Per Page : </label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    </select>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-bordered custom-table">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.ProductId)</th>
                            <th>@Html.DisplayNameFor(model => model.ProductName)</th>
                            <th>@Html.DisplayNameFor(model => model.ProductCode)</th>
                            <th>@Html.DisplayNameFor(model => model.ProductDescription)</th>
                            <th>@Html.DisplayNameFor(model => model.Price)</th>
                            <th>@Html.DisplayNameFor(model => model.CategoryName)</th>
                            <th>@Html.DisplayNameFor(model => model.LabelName)</th>
                            <th>@Html.DisplayNameFor(model => model.MeasuringUnitTypeName)</th>
                            
                            <th>Actions</th>


                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Items!=null)
                        {
                            @foreach (var item in Model.Items)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.ProductId)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductName)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductCode)</td>
                                    <td>@Html.DisplayFor(modelitem => item.ProductDescription)</td>
                                    <td>@Html.DisplayFor(modelitem => item.Price)</td>
                                    <td>@Html.DisplayFor(modelItem => item.CategoryName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.LabelName)</td>
                                    <td>@Html.DisplayFor(modelItem => item.MeasuringUnitTypeName)</td>




                                    <td class="table-actions">
                                        <a class="btn btn-primary btn-sm" asp-action="Edit" asp-route-id="@item.ProductId">Edit</a>
                                        <a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                                    </td>


                                </tr>
                            }
                            
                            
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">No users found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <span class="text-muted">Total Items : @Model.TotalCount | Showing @Model.PageSize Items per page</span>
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="User pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                                   asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">First</a>
                            </li>
                            <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                                   asp-route-searchUsername="@ViewData["searchUsername"]">Previous</a>
                            </li>
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 1);
                                int endPage = Math.Min(Model.TotalPages, startPage + 2);
                                if (endPage - startPage < 2)
                                {
                                    startPage = Math.Max(1, endPage - 2);
                                }

                            }
                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">@i</a>
                                </li>
                            }
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Next</a>
                            </li>
                            <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Last</a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
       

        function SearchNameChange(){
            debugger;

            const search = document.querySelector('input[name="searchUsername"]').value;
            window.location.href = '@Url.Action("Index", "User")'
                + '?pageNumber=1&pageSize=' + select.value
                + (search ? '&searchUsername=' + encodeURIComponent(search) : '');
        }


           function changePageSize(select) {
               debugger;
            const search = document.querySelector('input[name="searchUsername"]').value;
 
            window.location.href = '@Url.Action("Index", "User")'
                + '?pageNumber=1&pageSize=' + select.value
                + (search ? '&searchUsername=' + encodeURIComponent(search) : '');
        }


    </script>
} *@

@model IMS.Models.ProductViewModel;

@{
    ViewData["Title"] = "Products";
}
<div class="card-header bg-success text-white">
    <h2 class="mb-0" style="text-align:center">Product Management</h2>
</div>

<div class="filter-form">
    <form id="productFilterForm">

        <div class="row" style="margin-top:3px">
            <div>
                <label for="pageSize" class="form-label me-2">Items Per Page : </label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                    <option value="5" selected="@(Model.PageSize == 5)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                </select>
            </div>
            <div>
                <a asp-action="Create" class="btn btn-success" style="margin-left: 10px;">Create New Product</a>
            </div>
            <div class="col-md-3">
                <label for="productName">Product Name</label>
                <input type="text" id="productName" name="ProductName" class="form-control" oninput="applyFilters()" placeholder="Enter product name" />
            </div>
            <div class="col-md-3">
                <label for="productCode">Product Code</label>
                <input type="text" id="productCode" name="ProductCode" class="form-control" oninput="applyFilters()" placeholder="Enter product code" />
            </div>
            @* <div class="col-md-3">
                <label for="isEnabled">Status</label>
                <select id="isEnabled" name="IsEnabled" class="form-control" onchange="applyFilters()">
                    <option value="">All</option>
                    <option value="true">Enabled</option>
                    <option value="false">Disabled</option>
                </select>
            </div> *@
            <div class="col-md-3">
                <label for="priceFrom">Price From</label>
                <input type="number" id="priceFrom" name="PriceFrom" class="form-control" oninput="applyFilters()" placeholder="Min price" />
            </div>
            <div class="col-md-3">
                <label for="priceTo">Price To</label>
                <input type="number" id="priceTo" name="PriceTo" class="form-control" oninput="applyFilters()" placeholder="Max price" />

            </div>
            <div class="col-md-3">
                <label for="categorySelect">Category</label>
                <select id="categorySelect" name="CategoryId" class="form-control" onchange="applyFilters()">
                    <option value=""><--Please Select value --></></option>
                    @foreach (var category in Model.CategoryNameList)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
                </select>
                @* @Html.DropDownListFor(Model => Model.CategoryName,new SelectList(Model.CategoryNameList,"Key","Value"),"<--Please Select Valuee-->",new { Class="form-control"}) *@
            </div>
            <div class="col-md-3">
                <label for="labelSelect">Label</label>
                <select id="labelSelect" name="LabelId" class="form-control" onchange="applyFilters()">
                    <option value=""><--Please Select value --></option>
                    @foreach (var label in Model.LabelNameList)
                    {
                        <option value="@label.LabelId">@label.LabelName</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="measuringUnitSelect">Measuring Unit Type</label>
                <select id="measuringUnitSelect" name="MeasuringUnitTypeId" class="form-control" onchange="applyFilters()">
                    <option value=""><--Please Select value --></option>
                    @foreach (var unit in Model.MeasuringUnitTypeNameList)
                    {
                        <option value="@unit.MeasuringUnitTypeId">@unit.MeasuringUnitTypeName</option>
                    }
                </select>
            </div>
        </div>
        
    </form>
</div>

<div id="productList" class="mt-4">
    <!-- Product list will be loaded here via AJAX -->
    
    
</div>
@* <div id="productList" data-url="@Url.Action("GetFilteredProducts", "Product")">
    @await Html.PartialAsync("_PagedTable", Model.PagedResult)
</div> *@


@* <div class="pagination mt-3">
    <button id="prevPage" class="btn btn-secondary" onclick="changePage(-1)">Previous</button>
    <span id="pageInfo">Page 1</span>
    <button id="nextPage" class="btn btn-secondary" onclick="changePage(1)">Next</button>
</div>
 *@

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function changePageSize(select) {
               debugger;
            window.location.href = '@Url.Action("GetFilteredProducts", "Product")'
                + '?pageNumber=1&pageSize=' + select.value;
                let currentPage = 1;
                var pageSize = select.value;
                applyFilters();
        }
    </script>
    <script>
        let currentPage = 1;
        const pageSize = 10;

        function applyFilters() {
            debugger;
            const filters = {
                ProductName: $('#productName').val(),
                ProductCode: $('#productCode').val(),
                PriceFrom: $('#priceFrom').val(),
                PriceTo: $('#priceTo').val(),
                IsEnabled: $('#isEnabled').val(),
                SizeId: $('#sizeSelect').val(),
                CategoryId: $('#categorySelect').val(),
                LabelId: $('#labelSelect').val(),
                MeasuringUnitTypeId: $('#measuringUnitSelect').val(),
                PageNumber: currentPage,
                PageSize: pageSize
            };

            $.ajax({
                url: '@Url.Action("GetFilteredProducts", "Product")',
                type: 'GET',
                data: filters,
                success: function (data) {
                    debugger;
                    $('#productList').html(data);
                },
                error: function () {
                    alert('Error loading products.');
                }
            });
        }

        
        

        // Initial load
        $(document).ready(function () {
            applyFilters();
        });
    </script>
    @* <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        "use-strict"
        function loadPage(url, pageNumber, pageSize) {
            $.ajax({
                url: url,
                data: { pageNumber: pageNumber, pageSize: pageSize },
                success: function (data) {
                    $("#productList").html(data);
                }
            });
        }

        $(document).on("change", "#pageSize", function () {
            var pageSize = $(this).val();
            var url = $("#productList").data("url");
            loadPage(url, 1, pageSize);
        });

        $(document).on("click", ".pagination a", function (e) {
            e.preventDefault();
            var pageNumber = $(this).data("page");
            var pageSize = $("#pageSize").val();
            var url = $("#productList").data("url");
            loadPage(url, pageNumber, pageSize);
        });
        $(document).ready(function () {
            applyFilters();
        });
    </script> *@

}



