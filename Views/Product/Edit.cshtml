@using IMS.DAL.PrimaryDBContext
@model ProductViewModel;

<div class="card shadow-sm">
    <div class="card-header bg-primary text-white py-3">
        <div class="d-flex align-items-center">
            <i class="fa fa-edit me-2"></i>
            <h4 class="mb-0">Edit Product</h4>
        </div>
    </div>
    <div class="card-body p-4">
        <form asp-action="Edit" method="post" enctype="multipart/form-data" id="productForm" novalidate>
            <input type="hidden" asp-for="ProductId" />
            <div class="row">
                <div class="col-md-6">
                    <!-- Product Fields -->
                    
                    <!-- Product Name -->
                    <div class="col-12 mb-4">
                        <div class="form-floating">
                            <input asp-for="ProductName" class="form-control form-control-lg" 
                                   placeholder="Enter product name" 
                                   required />
                            <label asp-for="ProductName" class="fw-semibold">
                                <i class="fa fa-box me-1 text-primary"></i>Product Name
                                <span class="text-danger">*</span>
                            </label>
                        </div>
                        <span asp-validation-for="ProductName" class="text-danger small"></span>
                    </div>

                    <!-- Product Code -->
                    <div class="col-12 mb-4">
                        <div class="form-floating">
                            <input asp-for="ProductCode" id="ProductCode" class="form-control form-control-lg" 
                                   placeholder="Enter product code" />
                            <label asp-for="ProductCode" class="fw-semibold">
                                <i class="fa fa-barcode me-1 text-primary"></i>Product Code
                            </label>
                        </div>
                        <span asp-validation-for="ProductCode" class="text-danger small"></span>
                    </div>

                    <!-- Description -->
                    <div class="col-12 mb-4">
                        <label asp-for="ProductDescription" class="form-label fw-semibold">
                            <i class="fa fa-align-left me-1 text-primary"></i>Description
                        </label>
                        <textarea asp-for="ProductDescription" class="form-control" 
                                  rows="3" 
                                  placeholder="Enter product description (optional)"></textarea>
                        <span asp-validation-for="ProductDescription" class="text-danger small"></span>
                    </div>

                    <!-- Unit Price -->
                    <div class="col-12 mb-4">
                        <div class="form-floating">
                            <input asp-for="Price" class="form-control form-control-lg" 
                                   type="number" step="0.001" 
                                   placeholder="Enter unit price" />
                            <label asp-for="Price" class="fw-semibold">
                                <i class="fa fa-rupee-sign me-1 text-primary"></i>Unit Price
                            </label>
                        </div>
                        <span asp-validation-for="Price" class="text-danger small"></span>
                    </div>

                    <!-- Measuring Unit Type -->
                    <div class="col-12 mb-4">
                        <label class="form-label fw-semibold">
                            <i class="fa fa-ruler me-1 text-primary"></i>Measuring Unit Type
                            <span class="text-danger">*</span>
                        </label>
                        <input id="MeasuringUnitTypeId" name="MUTId" style="width: 100%;" />
                        <span asp-validation-for="MUTId" class="text-danger small"></span>
                    </div>

                    <!-- Label -->
                    <div class="col-12 mb-4">
                        <label class="form-label fw-semibold">
                            <i class="fa fa-tag me-1 text-primary"></i>Label
                        </label>
                        <input id="LabelId" name="LabelId" style="width: 100%;" />
                        <span asp-validation-for="LabelId" class="text-danger small"></span>
                    </div>

                    <!-- Category -->
                    <div class="col-12 mb-4">
                        <label class="form-label fw-semibold">
                            <i class="fa fa-tags me-1 text-primary"></i>Category
                        </label>
                        <input id="CategoryId" name="CategoryId" style="width: 100%;" />
                        <span asp-validation-for="CategoryId" class="text-danger small"></span>
                    </div>

                    <!-- Vendor -->
                    <div class="col-12 mb-4">
                        <label class="form-label fw-semibold">
                            <i class="fa fa-building me-1 text-primary"></i>Vendor
                        </label>
                        <input id="VendorId" name="VendorId" style="width: 100%;" />
                        <span asp-validation-for="VendorId" class="text-danger small"></span>
                    </div>

                    <!-- Location -->
                    <div class="col-12 mb-4">
                        <label asp-for="Location" class="form-label fw-semibold">
                            <i class="fa fa-map-marker-alt me-1 text-primary"></i>Location
                        </label>
                        <input asp-for="Location" class="form-control form-control-lg" 
                               placeholder="Enter product location (optional)" />
                        <span asp-validation-for="Location" class="text-danger small"></span>
                    </div>

                    <!-- Enabled Toggle -->
                    <div class="col-12 mb-4">
                        <div class="card bg-light">
                            <div class="card-body py-3">
                                <div class="form-check form-switch d-flex align-items-center">
                                    <input type="checkbox" asp-for="IsEnabled" class="form-check-input me-3" id="isEnabledSwitch" style="transform: scale(1.2);" />
                                    <label asp-for="IsEnabled" class="form-check-label fw-semibold mb-0" for="isEnabledSwitch">
                                        <i class="fa fa-toggle-on me-1 text-success"></i>Enabled
                                    </label>
                                </div>
                            </div>
                        </div>
                        <span asp-validation-for="IsEnabled" class="text-danger small"></span>
                    </div>
                </div>

                <div class="col-md-6">
                    <!-- Sizes -->
                    <h6>Sizes</h6>
                    <table class="table table-bordered" id="sizesTable">
                        <thead>
                            <tr>
                                <th>MU</th>
                                <th>Size from</th>
                                <th>Size to</th>
                                <th>Unit price</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="sizesTableBody">
                            @if (Model.productRanges != null && Model.productRanges.Count > 0)
                            {
                                @foreach (var item in Model.productRanges)
                                {
                                    <tr data-size-id="@item.ProductRangeId" data-measuring-unit-id="@item.MeasuringUnitIdFk" 
                                        data-range-from="@item.RangeFrom" data-range-to="@item.RangeTo" data-unit-price="@item.UnitPrice">
                                        <td>@item.MeasuringUnitIdFk</td>
                                        <td>@item.RangeFrom.ToString("0.##")</td>
                                        <td>@item.RangeTo.ToString("0.##")</td>
                                        <td>@item.UnitPrice.ToString("0.##")</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-primary edit-size-btn">Edit</button>
                                            <button type="button" class="btn btn-sm btn-danger remove-size-btn">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <button id="addSizeBtn" type="button" class="btn btn-sm btn-primary">Add size</button>
                </div>
            </div>

            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <a asp-action="Index" class="btn btn-outline-secondary btn-lg me-md-2">
                    <i class="fa fa-times me-1"></i>Cancel
                </a>
                <button type="submit" class="btn btn-success btn-lg">
                    <i class="fa fa-save me-1"></i>Update Product
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Add/Edit Size Modal -->
<div class="modal fade" id="sizeModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" id="sizeModalContent">
            <!-- Content will be loaded here -->
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/form-validation.js"></script>
    <script>
        $(document).ready(function () {
            let measuringUnitTypeId = null;
            let sizeCounter = 0;
            let editingSizeId = null; // Track which size is being edited

            // Function to get measuring unit type id from Kendo ComboBox
            function getMeasuringUnitTypeId() {
                var mutCombo = $("#MeasuringUnitTypeId").data("kendoComboBox");
                if (mutCombo) {
                    return mutCombo.value();
                }
                return null;
            }

            // Initialize measuringUnitTypeId after Kendo ComboBox is initialized
            setTimeout(function() {
                measuringUnitTypeId = getMeasuringUnitTypeId();
                console.log("Initial MeasuringUnitTypeId:", measuringUnitTypeId);
            }, 100);

            // Capture MeasuringUnitTypeId on change (using Kendo ComboBox change event)
            $("#MeasuringUnitTypeId").on("change", function () {
                measuringUnitTypeId = getMeasuringUnitTypeId();
                console.log("MeasuringUnitTypeId changed to:", measuringUnitTypeId);
            });

            // Open Add Size Modal
            $("#addSizeBtn").click(function () {
                // Get current value directly from Kendo ComboBox
                var currentMutId = getMeasuringUnitTypeId();
                
                if (!currentMutId || currentMutId === "" || currentMutId === "0") {
                    alert("Please select a Measuring Unit Type first before adding sizes.");
                    var mutCombo = $("#MeasuringUnitTypeId").data("kendoComboBox");
                    if (mutCombo) {
                        mutCombo.focus();
                    }
                    return;
                }
                
                // Update the variable with current value
                measuringUnitTypeId = currentMutId;

                editingSizeId = null; // Reset editing mode
                $.ajax({
                    url: "/Product/AddSizePartial",
                    type: "GET",
                    data: { measuringUnitTypeId: measuringUnitTypeId },
                    success: function (data) {
                        $("#sizeModalContent").html(data);
                        $("#sizeModal .modal-title").text("Add Size");
                        
                        // Pre-populate the Measuring Unit Type dropdown with the current selection
                        setTimeout(function() {
                            var mutCombo = $("#modalMeasuringUnitTypeId").data("kendoComboBox");
                            if (mutCombo) {
                                mutCombo.value(measuringUnitTypeId);
                                // Manually trigger the change event to load measuring units
                                var changeEvent = $.Event("change");
                                changeEvent.sender = mutCombo;
                                mutCombo.trigger(changeEvent);
                                
                                // Also call loadMeasuringUnits directly as backup
                                if (typeof loadMeasuringUnits === 'function') {
                                    loadMeasuringUnits(measuringUnitTypeId);
                                }
                            }
                        }, 200);
                        
                        $("#sizeModal").modal("show");
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading partial view:", error);
                        alert("Failed to load size form. Please try again.");
                    }
                });
            });

            // Edit Size Button Click
            $(document).on("click", ".edit-size-btn", function () {
                var $row = $(this).closest("tr");
                var sizeId = $row.data("size-id");
                var measuringUnitId = $row.data("measuring-unit-id");
                var rangeFrom = $row.data("range-from");
                var rangeTo = $row.data("range-to");
                var unitPrice = $row.data("unit-price");

                editingSizeId = sizeId; // Set editing mode

                // Get current value directly from Kendo ComboBox
                var currentMutId = getMeasuringUnitTypeId();
                
                if (!currentMutId || currentMutId === "" || currentMutId === "0") {
                    alert("Please select a Measuring Unit Type first before editing sizes.");
                    var mutCombo = $("#MeasuringUnitTypeId").data("kendoComboBox");
                    if (mutCombo) {
                        mutCombo.focus();
                    }
                    return;
                }
                
                // Update the variable with current value
                measuringUnitTypeId = currentMutId;

                $.ajax({
                    url: "/Product/AddSizePartial",
                    type: "GET",
                    data: { measuringUnitTypeId: measuringUnitTypeId },
                    success: function (data) {
                        $("#sizeModalContent").html(data);
                        $("#sizeModal .modal-title").text("Edit Size");
                        
                        // Wait for modal content to be fully loaded and Kendo ComboBoxes initialized
                        setTimeout(function() {
                            // Set Measuring Unit Type first
                            var mutCombo = $("#modalMeasuringUnitTypeId").data("kendoComboBox");
                            if (mutCombo) {
                                mutCombo.value(measuringUnitTypeId);
                                
                                // Load measuring units and then set the value
                                if (typeof window.loadMeasuringUnits === 'function') {
                                    console.log("Loading measuring units for edit with MUTId:", measuringUnitTypeId);
                                    window.loadMeasuringUnits(measuringUnitTypeId);
                                    
                                    // Wait for measuring units to load, then set the value
                                    setTimeout(function() {
                                        var measuringUnitCombo = $("#modalMeasuringUnitId").data("kendoComboBox");
                                        if (measuringUnitCombo) {
                                            measuringUnitCombo.value(measuringUnitId.toString());
                                            console.log("Set measuring unit value to:", measuringUnitId);
                                        }
                                    }, 500);
                                }
                            }
                            
                            // Set other field values (formatted to remove trailing zeros)
                            $("#addSizeForm input[name='RangeFrom']").val(formatDecimal(rangeFrom));
                            $("#addSizeForm input[name='RangeTo']").val(formatDecimal(rangeTo));
                            $("#addSizeForm input[name='UnitPrice']").val(formatDecimal(unitPrice));
                        }, 300);
                        
                        $("#sizeModal").modal("show");
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading partial view:", error);
                        alert("Failed to load size form. Please try again.");
                    }
                });
            });

            // Save Size from Modal (Add or Edit)
            $(document).on("click", "#saveSizeBtn", function (e) {
                e.preventDefault();
                
                var measuringUnitCombo = $("#modalMeasuringUnitId").data("kendoComboBox");
                var measuringUnitId = measuringUnitCombo ? measuringUnitCombo.value() : $("#addSizeForm input[name='MeasuringUnitIdFk']").val();
                var rangeFrom = $("#addSizeForm input[name='RangeFrom']").val();
                var rangeTo = $("#addSizeForm input[name='RangeTo']").val();
                var unitPrice = $("#addSizeForm input[name='UnitPrice']").val();

                // Validate non-empty fields (allow 0 but not null/empty)
                if (!measuringUnitId || measuringUnitId === "" || measuringUnitId === "0") {
                    alert("Please select a Measuring Unit.");
                    return;
                }

                if (rangeFrom === "" || rangeFrom === null || rangeTo === "" || rangeTo === null || unitPrice === "" || unitPrice === null) {
                    alert("Please fill in all fields. You can use 0 as a value, but fields cannot be empty.");
                    return;
                }

                // Validate numeric values (allow 0 but not negative, and RangeFrom must be less than RangeTo)
                if (parseFloat(rangeFrom) < 0 || parseFloat(rangeTo) < 0 || parseFloat(unitPrice) < 0) {
                    alert("Numeric values cannot be negative.");
                    return;
                }

                if (parseFloat(rangeFrom) > parseFloat(rangeTo)) {
                    alert("Range From must be less than Range To.");
                    return;
                }

                if (editingSizeId) {
                    // Update existing size
                    updateSizeInTable(editingSizeId, measuringUnitId, rangeFrom, rangeTo, unitPrice);
                } else {
                    // Add new size
                    addSizeToTable(measuringUnitId, rangeFrom, rangeTo, unitPrice);
                }
                
                // Clear form and close modal
                $("#addSizeForm")[0].reset();
                $("#sizeModal").modal("hide");
                editingSizeId = null;
            });

            // Format number to show up to 2 decimal places without trailing zeros
            function formatDecimal(value) {
                var num = parseFloat(value);
                if (isNaN(num)) return value;
                // Format to max 2 decimal places and remove trailing zeros
                return num.toFixed(2).replace(/\.?0+$/, '');
            }

            // Add size to table
            function addSizeToTable(measuringUnitId, rangeFrom, rangeTo, unitPrice) {
                sizeCounter++;
                // Convert to numbers to ensure proper data types
                var measuringUnitIdNum = parseInt(measuringUnitId);
                var rangeFromNum = parseFloat(rangeFrom);
                var rangeToNum = parseFloat(rangeTo);
                var unitPriceNum = parseFloat(unitPrice);
                
                var row = `
                    <tr data-size-id="new_${sizeCounter}" data-measuring-unit-id="${measuringUnitIdNum}" 
                        data-range-from="${rangeFromNum}" data-range-to="${rangeToNum}" data-unit-price="${unitPriceNum}">
                        <td>${measuringUnitIdNum}</td>
                        <td>${formatDecimal(rangeFromNum)}</td>
                        <td>${formatDecimal(rangeToNum)}</td>
                        <td>${formatDecimal(unitPriceNum)}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-primary edit-size-btn">Edit</button>
                            <button type="button" class="btn btn-sm btn-danger remove-size-btn">Delete</button>
                        </td>
                    </tr>
                `;
                $("#sizesTableBody").append(row);
            }

            // Update size in table
            function updateSizeInTable(sizeId, measuringUnitId, rangeFrom, rangeTo, unitPrice) {
                var measuringUnitIdNum = parseInt(measuringUnitId);
                var rangeFromNum = parseFloat(rangeFrom);
                var rangeToNum = parseFloat(rangeTo);
                var unitPriceNum = parseFloat(unitPrice);
                
                var $row = $(`tr[data-size-id="${sizeId}"]`);
                
                // Clear cached data to force refresh
                $row.removeData("measuring-unit-id");
                $row.removeData("range-from");
                $row.removeData("range-to");
                $row.removeData("unit-price");
                
                // Update both attributes and data (using data() to update cache, attr() for DOM)
                $row.attr("data-measuring-unit-id", measuringUnitIdNum);
                $row.attr("data-range-from", rangeFromNum);
                $row.attr("data-range-to", rangeToNum);
                $row.attr("data-unit-price", unitPriceNum);
                
                // Also update using data() to update the cache
                $row.data("measuring-unit-id", measuringUnitIdNum);
                $row.data("range-from", rangeFromNum);
                $row.data("range-to", rangeToNum);
                $row.data("unit-price", unitPriceNum);
                
                // Update visible table cells with formatted decimals
                $row.find("td:eq(0)").text(measuringUnitIdNum);
                $row.find("td:eq(1)").text(formatDecimal(rangeFromNum));
                $row.find("td:eq(2)").text(formatDecimal(rangeToNum));
                $row.find("td:eq(3)").text(formatDecimal(unitPriceNum));
            }

            // Remove size from table
            $(document).on("click", ".remove-size-btn", function () {
                $(this).closest("tr").remove();
            });

            // Check product code availability on blur (for edit mode)
            $("#ProductCode").on("blur", function () {
                var productCode = $(this).val();
                var productId = $("#ProductId").val();
                
                if (productCode && productCode.trim() !== "") {
                    $.ajax({
                        url: "/Product/CheckProductCode",
                        type: "GET",
                        data: { productCode: productCode, excludeProductId: productId },
                        success: function (exists) {
                            if (exists) {
                                $("#ProductCode").addClass("is-invalid");
                                if ($("#product-code-error").length === 0) {
                                    $("#ProductCode").after('<div id="product-code-error" class="invalid-feedback">Product code already exists. Please use a different code.</div>');
                                }
                            } else {
                                $("#ProductCode").removeClass("is-invalid").addClass("is-valid");
                                $("#product-code-error").remove();
                            }
                        },
                        error: function () {
                            console.log("Error checking product code availability");
                        }
                    });
                } else {
                    $("#ProductCode").removeClass("is-invalid is-valid");
                    $("#product-code-error").remove();
                }
            });

            // Form submission - collect all sizes and add as hidden inputs
            $("#productForm").on("submit", function (e) {
                // Clear existing hidden inputs
                $("input[name^='productRanges']").remove();
                
                // Add hidden inputs for each size
                var sizeIndex = 0;
                $("#sizesTableBody tr").each(function () {
                    var $row = $(this);
                    var sizeId = $row.data("size-id");
                    var measuringUnitId = $row.data("measuring-unit-id");
                    var rangeFrom = $row.data("range-from");
                    var rangeTo = $row.data("range-to");
                    var unitPrice = $row.data("unit-price");

                    // Allow 0 but not null/empty (measuringUnitId must be > 0 though)
                    if (measuringUnitId && measuringUnitId > 0 && 
                        rangeFrom !== "" && rangeFrom !== null && rangeFrom !== undefined &&
                        rangeTo !== "" && rangeTo !== null && rangeTo !== undefined &&
                        unitPrice !== "" && unitPrice !== null && unitPrice !== undefined) {
                        // Add ProductRangeId for existing sizes
                        if (sizeId && !sizeId.toString().startsWith("new_")) {
                            $("<input>").attr({
                                type: "hidden",
                                name: `productRanges[${sizeIndex}].ProductRangeId`,
                                value: sizeId
                            }).appendTo("#productForm");
                        }
                        
                        $("<input>").attr({
                            type: "hidden",
                            name: `productRanges[${sizeIndex}].MeasuringUnitIdFk`,
                            value: measuringUnitId
                        }).appendTo("#productForm");
                        
                        $("<input>").attr({
                            type: "hidden",
                            name: `productRanges[${sizeIndex}].RangeFrom`,
                            value: rangeFrom
                        }).appendTo("#productForm");
                        
                        $("<input>").attr({
                            type: "hidden",
                            name: `productRanges[${sizeIndex}].RangeTo`,
                            value: rangeTo
                        }).appendTo("#productForm");
                        
                        $("<input>").attr({
                            type: "hidden",
                            name: `productRanges[${sizeIndex}].UnitPrice`,
                            value: unitPrice
                        }).appendTo("#productForm");
                        
                        // Initialize Kendo combobox for the newly added measuring unit dropdown
                        initializeMeasuringUnitCombobox("#MUTId_" + sizeIndex);
                        
                        sizeIndex++;
                    }
                });
            });

            // Function to initialize Kendo combobox for measuring unit dropdowns
            function initializeMeasuringUnitCombobox(element) {
                $(element).kendoComboBox({
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Product/GetMeasuringUnitTypes",
                                dataType: "json"
                            }
                        }
                    },
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select MU Type --",
                    value: "@Model.MUTId",
                    filter: "contains",
                    suggest: true,
                    minLength: 1,
                    change: function() {
                        // Update the variable when ComboBox value changes
                        measuringUnitTypeId = this.value();
                        console.log("MeasuringUnitTypeId changed via ComboBox change event:", measuringUnitTypeId);
                    }
                });
            }
            
            // Initialize Kendo UI ComboBoxes
            console.log("Initializing Kendo comboboxes for Edit page...");
            
            // Initialize Measuring Unit Type Combobox
            initializeMeasuringUnitCombobox("#MeasuringUnitTypeId");
            
            // Initialize measuringUnitTypeId after ComboBox is ready
            setTimeout(function() {
                measuringUnitTypeId = getMeasuringUnitTypeId();
                console.log("MeasuringUnitTypeId initialized after ComboBox setup:", measuringUnitTypeId);
            }, 200);

            // Initialize Label Combobox
            $("#LabelId").kendoComboBox({
                dataSource: {
                    transport: {
                        read: {
                            url: "/Product/GetLabels",
                            dataType: "json"
                        }
                    }
                },
                dataTextField: "text",
                dataValueField: "value",
                placeholder: "-- Select Label --",
                value: "@Model.LabelId",
                filter: "contains",
                suggest: true,
                minLength: 1
            });

            // Initialize Category Combobox
            $("#CategoryId").kendoComboBox({
                dataSource: {
                    transport: {
                        read: {
                            url: "/Product/GetCategories",
                            dataType: "json"
                        }
                    }
                },
                dataTextField: "text",
                dataValueField: "value",
                placeholder: "-- Select Category --",
                value: "@Model.CategoryId",
                filter: "contains",
                suggest: true,
                minLength: 1
            });

            // Initialize Vendor Combobox
            $("#VendorId").kendoComboBox({
                dataSource: {
                    transport: {
                        read: {
                            url: "/Product/GetVendors",
                            dataType: "json"
                        }
                    }
                },
                dataTextField: "text",
                dataValueField: "value",
                placeholder: "-- Select Vendor --",
                value: "@Model.VendorId",
                filter: "contains",
                suggest: true,
                minLength: 1
            });

            console.log("Kendo comboboxes initialized for Edit page");
        });
    </script>
}
