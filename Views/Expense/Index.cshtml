@model IMS.Models.ExpenseViewModel;

<link href="~/css/product-management.css" rel="stylesheet" />
<link href="~/css/user-management.css" rel="stylesheet" />

<div class="card shadow-sm">
    <div class="card-header bg-success text-white">
        <h2 class="mb-0" style="text-align:center">Expense Management</h2>
    </div>
    <div class="card-body">
        <!-- Enhanced Search Section - Product Management Style -->
        <div class="card mb-4 search-filters-card">
            <div class="card-header filter-header bg-transparent border-0 py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 text-primary fw-bold">
                        <i class="fa-solid fa-filter filter-icon me-2"></i>Advanced Search & Filters
                    </h5>
                    <button class="btn btn-sm btn-outline-primary collapse-btn" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="true">
                        <i class="fa-solid fa-chevron-down"></i>
                    </button>
                </div>
            </div>
            <div class="collapse show" id="filterCollapse">
                <div class="card-body pt-0">
                    <form asp-action="Index" asp-controller="Expense" method="get">
                        
                        <!-- Filter Inputs Row -->
                        <div class="row g-3 mb-4">
                            <div class="col-md-3">
                                <div class="form-floating">
                                    @Html.DropDownList("expenseFilters.ExpenseTypeId", ViewBag.EnabledExpenses as IEnumerable<SelectListItem>, "<-- Select Expense Type -->", new { @class = "form-control border-0 shadow-sm", @id = "expenseFilters.ExpenseTypeId" })
                                    <label for="expenseFilters.ExpenseTypeId" class="text-muted">
                                        <i class="fa-solid fa-tags me-1"></i>Expense Type
                                    </label>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-floating">
                                    <input type="text"
                                           id="expenseDetail"
                                           name="expenseDetail"
                                           value="@Context.Request.Query["expenseDetail"]"
                                           class="form-control border-0 shadow-sm"
                                           placeholder="Enter Expense Detail" />
                                    <label for="expenseDetail" class="text-muted">
                                        <i class="fa-solid fa-align-left me-1"></i>Detail
                                    </label>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-floating">
                                    <input type="number"
                                           name="searchpFrom"
                                           value="@Context.Request.Query["searchpFrom"]"
                                           class="form-control border-0 shadow-sm"
                                           placeholder="Enter Amount From" />
                                    <label class="text-muted">
                                        <i class="fa-solid fa-rupee-sign me-1"></i>Amount From
                                    </label>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-floating">
                                    <input type="number"
                                           id="searchpTo"
                                           name="searchpTo"
                                           value="@Context.Request.Query["searchpTo"]"
                                           class="form-control border-0 shadow-sm"
                                           placeholder="Enter Amount To" />
                                    <label for="searchpTo" class="text-muted">
                                        <i class="fa-solid fa-rupee-sign me-1"></i>Amount To
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Date Range Row -->
                        <div class="row g-3 mb-4">
                            <div class="col-md-3">
                                <div class="form-floating">
                                    <input type="date" 
                                           name="FromDate"
                                           class="form-control border-0 shadow-sm"
                                           value="@(string.IsNullOrEmpty(Context.Request.Query["FromDate"]) ? "" : Context.Request.Query["FromDate"].ToString())" />
                                    <label class="text-muted">
                                        <i class="fa-solid fa-calendar-day me-1"></i>Date From
                                    </label>
                                </div>
                            </div>
                            
                            <div class="col-md-3">
                                <div class="form-floating">
                                    <input type="date" 
                                           name="ToDate"
                                           class="form-control border-0 shadow-sm"
                                           value="@(string.IsNullOrEmpty(Context.Request.Query["ToDate"]) ? "" : Context.Request.Query["ToDate"].ToString())" />
                                    <label class="text-muted">
                                        <i class="fa-solid fa-calendar-day me-1"></i>Date To
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Action Buttons Row -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary btn-enhanced btn-search px-4 py-2">
                                            <i class="fa-solid fa-magnifying-glass me-2"></i>Search Expenses
                                        </button>
                                        <a asp-action="Index" class="btn btn-secondary btn-enhanced btn-reset px-4 py-2">
                                            <i class="fa-solid fa-refresh me-2"></i>Reset Filters
                                        </a>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <a asp-action="Create" asp-controller="Expense" class="btn btn-success btn-enhanced btn-create px-4 py-2">
                                            <i class="fa-solid fa-plus me-2"></i>Create Expense
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-bordered custom-table">
                <thead>
                    <tr>
                        <th>Expense Id</th>
                        <th>Expense Type</th>
                       
                        <th>Expense detail</th>
                        <th>Expense Amount</th>
                        <th>Expense date</th>

                        <th>Actions</th>


                    </tr>
                </thead>
                <tbody>
                    @if (Model.ExpenseList.Any())
                    {
                        @foreach (var item in Model.ExpenseList)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.ExpenseId)</td>
                                <td>@Html.DisplayFor(modelItem => item.ExpenseType)</td>
                                
                                
                                <td>@Html.DisplayFor(modelitem => item.ExpenseDetail)</td>
                                <td>@Html.DisplayFor(modelitem => item.Amount)</td>
                                <td>@item.ExpenseDate.ToString("d MMMM yyyy")</td>

                                <td class="table-actions">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.ExpenseId" class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="fa-solid fa-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.ExpenseId" class="btn btn-sm btn-outline-warning" title="Edit Expense">
                                            <i class="fa-solid fa-edit"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.ExpenseId" class="btn btn-sm btn-outline-danger" title="Delete Expense">
                                            <i class="fa-solid fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No Expenses found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <span class="text-muted">Total Items : @Model.TotalCount | Showing @Model.PageSize Items per page</span>
            <div class="end-0">
                <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                    <option value="5" selected="@(Model.PageSize == 5)">5</option>
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="25" selected="@(Model.PageSize == 25)">25</option>
                </select>
            </div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="User pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                               asp-route-pageSize="@Model.PageSize">First</a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                        </li>
                        @{
                            int startPage = Math.Max(1, Model.CurrentPage - 1);
                            int endPage = Math.Min(Model.TotalPages, startPage + 2);
                            if (endPage - startPage < 2)
                            {
                                startPage = Math.Max(1, endPage - 2);
                            }

                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
    @*  </div> *@
</div>

@section Scripts {
    <script>
        // Enhanced Expense Management JavaScript - Product Management Style
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeExpenseManagement();
        });

        function initializeExpenseManagement() {
            // Add loading states to buttons
            addLoadingStates();
            
            // Add smooth animations
            addSmoothAnimations();
            
            // Add form validation feedback
            addFormValidation();
            
            // Initialize collapse functionality
            initializeCollapse();
        }

        function addLoadingStates() {
            const searchBtns = document.querySelectorAll('.btn-search');
            const resetBtns = document.querySelectorAll('.btn-reset');
            const createBtns = document.querySelectorAll('.btn-create');
            
            searchBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...';
                });
            });
            
            resetBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Resetting...';
                });
            });
            
            createBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Creating...';
                });
            });
        }

        function addSmoothAnimations() {
            // Add hover effects to form elements
            const formElements = document.querySelectorAll('.form-floating');
            formElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.transition = 'transform 0.3s ease';
                });
                
                element.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        }

        function addFormValidation() {
            const inputs = document.querySelectorAll('.form-control');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.remove('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        function initializeCollapse() {
            const collapseElement = document.getElementById('filterCollapse');
            const toggleButton = document.querySelector('[data-bs-target="#filterCollapse"]');
            const toggleIcon = toggleButton.querySelector('i');

            collapseElement.addEventListener('show.bs.collapse', function () {
                toggleIcon.classList.remove('fa-chevron-down');
                toggleIcon.classList.add('fa-chevron-up');
            });

            collapseElement.addEventListener('hide.bs.collapse', function () {
                toggleIcon.classList.remove('fa-chevron-up');
                toggleIcon.classList.add('fa-chevron-down');
            });
        }

        function SearchNameChange(){
            // Enhanced search functionality
            const searchInput = document.querySelector('input[name="expenseDetail"]');
            const searchValue = searchInput ? searchInput.value : '';
            
            window.location.href = '@Url.Action("Index", "Expense")'
                + '?pageNumber=1&pageSize=' + (document.getElementById('pageSize')?.value || 5)
                + (searchValue ? '&expenseDetail=' + encodeURIComponent(searchValue) : '');
        }

        function changePageSize(select) {
            // Add loading state
            const searchBtn = document.querySelector('.btn-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            window.location.href = '@Url.Action("Index", "Expense")'
                + '?pageNumber=1&pageSize=' + select.value;
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + Enter to search
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                const searchBtn = document.querySelector('.btn-search');
                if (searchBtn) {
                    searchBtn.click();
                }
            }
            
            // Escape to reset
            if (e.key === 'Escape') {
                const resetBtn = document.querySelector('.btn-reset');
                if (resetBtn) {
                    resetBtn.click();
                }
            }
        });

        // Add tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}
