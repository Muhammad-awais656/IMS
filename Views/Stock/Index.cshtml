@model IMS.Models.StockViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
    ViewBag.Title = "Stock Management";
}

<link href="~/css/product-management.css" rel="stylesheet" />
<link href="~/css/user-management.css" rel="stylesheet" />

@* <div class="container mt-4"> *@
<div class="card shadow-sm">
    <div class="card-header bg-primary text-white" >
        <h2 class="mb-0" style="text-align:center"> Stock Management</h2>
    </div>
    <div class="card-body">
        <!-- Enhanced Search Section -->
        <div class="card mb-4 user-search-card">
            <div class="card-header user-search-header bg-transparent border-0 py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 user-search-title">
                        <i class="fa-solid fa-search user-search-icon me-2"></i>Search & Actions
                    </h5>
                </div>
            </div>
            <div class="card-body user-search-section pt-0">
                <form asp-action="Index" asp-controller="Stock" asp-route-searchUsername="@ViewData["searchUsername"]" method="get">
                    
                    <div class="row g-3 align-items-end">
                        <!-- Search Input -->
                        <div class="col-md-6">
                            <div class="form-floating user-search-floating">
                                <input type="text"
                                       name="searchUsername"
                                       value="@Context.Request.Query["searchUsername"]"
                                       class="form-control user-search-input"
                                       placeholder="Enter Product Name"
                                       onchange="SearchNameChange()" />
                                <label class="text-muted">
                                    <i class="fa-solid fa-box me-1"></i>Search by Product Name
                                </label>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="col-md-6">
                            <div class="d-flex user-button-group justify-content-end flex-wrap gap-2">
                                <button type="submit" class="btn btn-user-search">
                                    <i class="fa-solid fa-magnifying-glass me-2"></i>Search
                                </button>
                                <a asp-action="Index" class="btn btn-user-reset">
                                    <i class="fa-solid fa-refresh me-2"></i>Refresh
                                </a>
                                <a asp-action="Create" class="btn btn-user-create">
                                    <i class="fa-solid fa-plus me-2"></i>Add New Stock
                                </a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-bordered custom-table">
                <thead>
                    <tr>
                        @* <th>Stock Id</th> *@
                        <th>Product Name</th>
                        <th>Product Code</th>
                        <th>Total Quantity</th>
                        <th>Used Quantity</th>
                        <th>Available Quantity</th>
                        <th>Unit Price</th>
                        <th>Stock Locaion</th>
                       @*  <th>Available Qty Amt</th> *@

                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.StockList.Any())
                    {
                        @foreach (var item in Model.StockList)
                        {
                            <tr>
                               @*  <td>@Html.DisplayFor(modelItem => item.StockMasterId)</td> *@
                                <td>@Html.DisplayFor(modelItem => item.ProductName)</td>
                                <td>@Html.DisplayFor(modelItem => item.ProductCode)</td>
                                <td>@Html.DisplayFor(modelItem => item.TotalQuantity)</td>
                                <td>@Html.DisplayFor(modelItem => item.UsedQuantity)</td>
                                <td>@Html.DisplayFor(modelItem => item.AvailableQuantity)</td>
                                <td>@Html.DisplayFor(modelItem => item.UnitPrice)</td>
                                <td>@Html.DisplayFor(modelItem => item.StockLocaion)</td>
                                  @*   <td>@(item.AvailableQuantity* item.UnitPrice) </td> *@
                                <td class="table-actions">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.StockMasterId" class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="fa-solid fa-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.StockMasterId" class="btn btn-sm btn-outline-warning" title="Edit Stock">
                                            <i class="fa-solid fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-success" title="View Stock History" 
                                                onclick="showStockHistory(@item.StockMasterId, '@Html.Raw(item.ProductName)', '@Html.Raw(item.ProductCode)', @item.AvailableQuantity)">
                                            <i class="fa-solid fa-history"></i>
                                        </button>
                                      @*   <a href="History" asp-route-StockMasterId="@item.StockMasterId" class="btn btn-sm btn-outline-success" title="View Stock History">
                                            <i class="fa-solid fa-history"></i> 
                                        </a>*@
                                        <a asp-action="Delete" asp-route-id="@item.StockMasterId" class="btn btn-sm btn-outline-danger" title="Delete Stock">
                                            <i class="fa-solid fa-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No Stock records found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <span class="text-muted">Total: @Model.TotalCount | Showing @Model.PageSize Records per page</span>
                <div>
                    <label for="pageSize" class="form-label me-2 text-muted">Items Per Page: </label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    </select>
                </div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Stock pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                               asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">First</a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                               asp-route-searchUsername="@ViewData["searchUsername"]">Previous</a>
                        </li>
                        @{
                            int startPage = Math.Max(1, Model.CurrentPage - 1);
                            int endPage = Math.Min(Model.TotalPages, startPage + 2);
                            if (endPage - startPage < 2)
                            {
                                startPage = Math.Max(1, endPage - 2);
                            }
                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Next</a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>
@* </div> *@

<!-- Stock Transaction History Modal -->
<div class="modal fade" id="stockHistoryModal" tabindex="-1" aria-labelledby="stockHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="stockHistoryModalLabel">
                    <i class="fa-solid fa-history me-2"></i>Stock Transaction History
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6><strong>Stock Details:</strong></h6>
                        <p class="mb-1"><strong>Product:</strong> <span id="modalProductName"></span></p>
                        <p class="mb-1"><strong>Product Code:</strong> <span id="modalProductCode"></span></p>
                    </div>
                    <div class="col-md-6">
                        <h6><strong>Stock Summary:</strong></h6>
                        <p class="mb-1"><strong>Available Quantity:</strong> <span id="modalAvailableQuantity" class="fw-bold"></span></p>
                        <p class="mb-1"><strong>Total Transactions:</strong> <span id="modalTransactionCount"></span></p>
                    </div>
                </div>
                
                <!-- Filters -->
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="stockHistoryFromDate" class="form-label">From Date:</label>
                        <input type="date" id="stockHistoryFromDate" class="form-control">
                    </div>
                    <div class="col-md-3">
                        <label for="stockHistoryToDate" class="form-label">To Date:</label>
                        <input type="date" id="stockHistoryToDate" class="form-control">
                    </div>
                    <div class="col-md-3">
                        <label for="stockHistoryTransactionType" class="form-label">Transaction Type:</label>
                        <select id="stockHistoryTransactionType" class="form-control">
                            <option value="">All Types</option>
                            <option value="1">Added</option>
                            <option value="2">Sale</option>
                            <option value="3">Purchase</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-primary d-block" onclick="loadStockHistory()">
                            <i class="fas fa-search"></i> Filter
                        </button>
                    </div>
                </div>
                
                <!-- Loading indicator -->
                <div id="stockHistoryLoading" class="text-center" style="display: none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading transaction history...</p>
                </div>
                
                <!-- Stock Transaction History Table -->
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="stockHistoryTable">
                        <thead class="table-dark">
                            <tr>
                                <th>Transaction ID</th>
                                <th>Quantity</th>
                                <th>Date</th>
                                <th>Transaction Type</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody id="stockHistoryBody">
                            <!-- Transaction data will be loaded here -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination for history -->
                <nav aria-label="Stock transaction history pagination" id="stockHistoryPagination" style="display: none;">
                    <ul class="pagination justify-content-center" id="stockHistoryPaginationList">
                        <!-- Pagination will be generated here -->
                    </ul>
                </nav>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced Stock Management JavaScript
        let currentStockMasterId = null;
        let currentStockHistoryPage = 1;
        const stockHistoryPageSize = 10;
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeStockManagement();
        });

        function initializeStockManagement() {
            // Add loading states to buttons
            addLoadingStates();
            
            // Add smooth animations
            addSmoothAnimations();
            
            // Add form validation feedback
            addFormValidation();
        }

        function addLoadingStates() {
            const searchBtn = document.querySelector('.btn-user-search');
            const resetBtn = document.querySelector('.btn-user-reset');
            
            if (searchBtn) {
                searchBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...';
                });
            }
            
            if (resetBtn) {
                resetBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Refreshing...';
                });
            }
        }

        function addSmoothAnimations() {
            // Add hover effects to form elements
            const formElements = document.querySelectorAll('.form-floating');
            formElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.transition = 'transform 0.3s ease';
                });
                
                element.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        }

        function addFormValidation() {
            const inputs = document.querySelectorAll('.form-control, .form-select');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.remove('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        function SearchNameChange() {
            // Add loading state
            const searchBtn = document.querySelector('.btn-user-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', document.getElementById('pageSize')?.value || '10');
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Stock")' + '?' + params.toString();
        }

        function changePageSize(select) {
            // Add loading state
            const searchBtn = document.querySelector('.btn-user-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get current form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Stock")' + '?' + params.toString();
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + Enter to search
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                const searchBtn = document.querySelector('.btn-user-search');
                if (searchBtn) {
                    searchBtn.click();
                }
            }
            
            // Escape to reset
            if (e.key === 'Escape') {
                const resetBtn = document.querySelector('.btn-user-reset');
                if (resetBtn) {
                    resetBtn.click();
                }
            }
        });

        // Add tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Stock History Modal Functions
        function showStockHistory(stockMasterId, productName, productCode, availableQuantity) {
            currentStockMasterId = stockMasterId;
            
            // Set modal title and stock details
            document.getElementById('modalProductName').textContent = productName;
            document.getElementById('modalProductCode').textContent = productCode || '-';
            document.getElementById('modalAvailableQuantity').textContent = availableQuantity;
            
            // Reset filters
            document.getElementById('stockHistoryFromDate').value = '';
            document.getElementById('stockHistoryToDate').value = '';
            document.getElementById('stockHistoryTransactionType').value = '';
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('stockHistoryModal'));
            modal.show();
            
            // Load initial data
            loadStockHistory();
        }

        function loadStockHistory(page = 1) {
            currentStockHistoryPage = page;
            
            // Show loading indicator
            document.getElementById('stockHistoryLoading').style.display = 'block';
            document.getElementById('stockHistoryTable').style.display = 'none';
            document.getElementById('stockHistoryPagination').style.display = 'none';
            
            // Get filter values
            const fromDate = document.getElementById('stockHistoryFromDate').value;
            const toDate = document.getElementById('stockHistoryToDate').value;
            const transactionType = document.getElementById('stockHistoryTransactionType').value;
            
            // Build query parameters
            const params = new URLSearchParams({
                stockMasterId: currentStockMasterId,
                pageNumber: page,
                pageSize: stockHistoryPageSize
            });
            
            if (fromDate) params.append('fromDate', fromDate);
            if (toDate) params.append('toDate', toDate);
            if (transactionType) params.append('transactionType', transactionType);
            
            // Make AJAX call
            fetch(`/Stock/GetStockHistory?${params.toString()}`)
                .then(response => response.json())
                .then(data => {
                    displayStockHistory(data);
                })
                .catch(error => {
                    console.error('Error loading stock history:', error);
                    showStockHistoryError('Failed to load stock history. Please try again.');
                })
                .finally(() => {
                    document.getElementById('stockHistoryLoading').style.display = 'none';
                    document.getElementById('stockHistoryTable').style.display = 'table';
                });
        }

        function displayStockHistory(data) {
            const tbody = document.getElementById('stockHistoryBody');
            tbody.innerHTML = '';
            
            if (data.transactions && data.transactions.length > 0) {
                // Update stock summary
                if (data.stockSummary) {
                    document.getElementById('modalTransactionCount').textContent = data.stockSummary.transactionCount;
                }
                
                // Display transactions
                data.transactions.forEach(transaction => {
                    const row = document.createElement('tr');
                    const quantityClass = transaction.stockQuantity > 0 ? 'text-success' : 'text-danger';
                    const quantitySign = transaction.stockQuantity > 0 ? '+' : '';
                    
                    row.innerHTML = `
                        <td><span class="badge bg-secondary">${transaction.stockTransactionId}</span></td>
                        <td class="${quantityClass} fw-bold">${quantitySign}${parseFloat(transaction.stockQuantity).toFixed(4)}</td>
                        <td>
                            <small class="text-muted">
                            ${new Date(transaction.transactionDate).toLocaleDateString()}
                           ${new Date(transaction.transactionDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}
                            </small>
                        </td>
                        <td>
                            <span class="badge ${transaction.stockQuantity > 0 ? 'bg-success' : 'bg-danger'}">
                                ${transaction.transactionType}
                            </span>
                        </td>
                        <td>${transaction.description || '-'}</td>
                    `;
                    tbody.appendChild(row);
                });
                
                // Display pagination if needed
                if (data.totalPages > 1) {
                    displayStockHistoryPagination(data.currentPage, data.totalPages);
                    document.getElementById('stockHistoryPagination').style.display = 'block';
                }
            } else {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                <br>No transaction history found
                            </div>
                        </td>
                    </tr>
                `;
            }
        }

        function displayStockHistoryPagination(currentPage, totalPages) {
            const paginationList = document.getElementById('stockHistoryPaginationList');
            paginationList.innerHTML = '';
            
            // Previous button
            if (currentPage > 1) {
                const prevLi = document.createElement('li');
                prevLi.className = 'page-item';
                prevLi.innerHTML = `<a class="page-link" href="#" onclick="loadStockHistory(${currentPage - 1}); return false;"><i class="fas fa-chevron-left"></i> Previous</a>`;
                paginationList.appendChild(prevLi);
            }
            
            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a class="page-link" href="#" onclick="loadStockHistory(${i}); return false;">${i}</a>`;
                paginationList.appendChild(li);
            }
            
            // Next button
            if (currentPage < totalPages) {
                const nextLi = document.createElement('li');
                nextLi.className = 'page-item';
                nextLi.innerHTML = `<a class="page-link" href="#" onclick="loadStockHistory(${currentPage + 1}); return false;">Next <i class="fas fa-chevron-right"></i></a>`;
                paginationList.appendChild(nextLi);
            }
        }

        function showStockHistoryError(message) {
            const tbody = document.getElementById('stockHistoryBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="text-danger">
                            <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                            <br>${message}
                        </div>
                    </td>
                </tr>
            `;
        }
    </script>
}
