@model IMS.Models.VendorPaymentFormViewModel

@{
    ViewData["Title"] = "Create Vendor Payment";
}

<div class="card shadow-sm">
    <div class="card-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none;">
        <h2 class="mb-0" style="text-align:center">Create Vendor Payment</h2>
    </div>

    <div class="card-body">
        <form asp-action="CreatePayment" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fa-solid fa-building me-1 text-primary"></i>Vendor *
                        </label>
                        <input asp-for="SupplierId" id="vendorComboBox" style="width: 100%;" required />
                        <span asp-validation-for="SupplierId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">
                            <i class="fa-solid fa-file-invoice me-1 text-primary"></i>Bill Number *
                        </label>
                        <input asp-for="BillId" id="billComboBox" style="width: 100%;" required />
                        <span asp-validation-for="BillId" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="PaymentAmount" class="form-label">Payment Amount *</label>
                        <input asp-for="PaymentAmount" class="form-control" type="number" step="0.01" min="0" required />
                        <span asp-validation-for="PaymentAmount" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="PaymentDate" class="form-label">Payment Date *</label>
                        <input asp-for="PaymentDate" class="form-control" type="datetime-local" required />
                        <span asp-validation-for="PaymentDate" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label">Payment Method *</label>
                        <input asp-for="PaymentMethod" id="paymentMethodSelect" style="width: 100%;" />
                        <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6" id="onlineAccountDiv" style="display: none;">
                    <div class="mb-3">
                        <label class="form-label">Online Account *</label>
                        <input asp-for="OnlineAccountId" id="onlineAccountSelect" style="width: 100%;" />
                        <span asp-validation-for="OnlineAccountId" class="text-danger"></span>
                    </div>
                    <div class="mb-3" id="accountBalanceDiv" style="display: none;">
                        <label class="form-label text-muted">
                            <i class="fa-solid fa-wallet me-1"></i>Available Balance
                        </label>
                        <div class="input-group">
                            <span class="input-group-text bg-light">$</span>
                            <input type="text" id="accountBalance" class="form-control" readonly style="font-weight: bold; background-color: #f8f9fa;" />
                        </div>
                        <small class="text-muted" id="balanceWarning" style="display: none; color: #dc3545 !important;"></small>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label">Description</label>
                        <textarea asp-for="Description" class="form-control" rows="3" placeholder="Enter payment description (optional)"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div id="formWarning" class="alert alert-warning d-none" role="alert"></div>

            <div class="d-flex justify-content-between">
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                <button type="submit" class="btn btn-success">Save</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            // Vendor ComboBox
            $("#vendorComboBox").kendoComboBox({
                placeholder: "Select Vendor...",
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                suggest: true,
                dataSource: [
                    { value: "", text: "--Select Vendor--" }
                    @if (Model.VendorList != null)
                    {
                        @foreach (var vendor in Model.VendorList)
                        {
                            <text>,</text>
                            <text>{ value: "@vendor.SupplierId", text: "@vendor.SupplierName" }</text>
                        }
                    }
                ],
                value: "@(Model.SupplierId > 0 ? Model.SupplierId.ToString() : "")",
                change: function () {
                    const supplierId = this.value();
                    const billCombo = $("#billComboBox").data("kendoComboBox");

                    if (billCombo) {
                        billCombo.dataSource.data([]);
                        billCombo.value("");

                        if (supplierId) {
                            billCombo.dataSource.add({ value: "", text: "Loading bills..." });
                            billCombo.enable(false);

                            fetch('@Url.Action("GetBillNumbers", "VendorPayments")' + '?supplierId=' + supplierId)
                                .then(response => response.json())
                                .then(data => {
                                    billCombo.dataSource.data([]);

                                    if (data && data.length > 0) {
                                        billCombo.dataSource.add({ value: "", text: "--Select Bill--" });
                                        data.forEach(function (bill) {
                                            // Use PurchaseOrderId (or BillId) as value, display BillNumber; keep TotalDueAmount for autofill
                                            const billId = bill.purchaseOrderId || bill.PurchaseOrderId;
                                            const billNumber = bill.billNumber || bill.BillNumber;
                                            const due = bill.totalDueAmount || bill.TotalDueAmount;
                                            billCombo.dataSource.add({ value: billId, text: billNumber, amount: due });
                                        });
                                    } else {
                                        billCombo.dataSource.add({ value: "", text: "No bills found for this vendor" });
                                    }

                                    billCombo.enable(true);
                                })
                                .catch(error => {
                                    console.error('Error fetching vendor bills:', error);
                                    billCombo.dataSource.data([]);
                                    billCombo.dataSource.add({ value: "", text: "Error loading bills" });
                                    billCombo.enable(true);
                                });
                        }
                    }
                }
            });

            // Store bill due amount for validation
            let selectedBillDueAmount = 0;

            // Bill ComboBox
            $("#billComboBox").kendoComboBox({
                placeholder: "Select Bill...",
                dataTextField: "text",
                dataValueField: "value",
                filter: "contains",
                suggest: true,
                dataSource: [ { value: "", text: "--Select Bill--" } ],
                value: "@(Model.BillId > 0 ? Model.BillId.ToString() : "")",
                change: function () {
                    const item = this.dataItem(this.selectedIndex);
                    const $amount = $("#PaymentAmount");
                    if (item && item.value) {
                        if (typeof item.amount !== 'undefined' && item.amount !== null) {
                            selectedBillDueAmount = parseFloat(item.amount) || 0;
                            $amount.val(item.amount);
                            // Validate payment amount against bill due amount
                            validatePaymentAmount();
                        }
                    } else {
                        selectedBillDueAmount = 0;
                        $amount.val("");
                    }
                }
            });

            // Payment Method & Online Account
            initializePaymentMethodCombo();

            // Validate payment amount on input and update balance display
            $("#PaymentAmount").on('input blur', function() {
                const paymentMethodCombo = $("#paymentMethodSelect").data("kendoComboBox");
                const paymentMethod = paymentMethodCombo ? paymentMethodCombo.value() : '';
                
                // Update balance display if online payment is selected
                if (paymentMethod === 'Online') {
                    const balance = parseFloat($("#accountBalance").val()) || 0;
                    if (balance > 0) {
                        updateBalanceDisplay(balance);
                    }
                }
                
                validatePaymentAmount();
            });

            // Sync values and validate on submit
            $('form').on('submit', function (event) {
                const vendorCombo = $("#vendorComboBox").data("kendoComboBox");
                const billCombo = $("#billComboBox").data("kendoComboBox");
                const paymentMethodCombo = $("#paymentMethodSelect").data("kendoComboBox");
                const onlineAccountCombo = $("#onlineAccountSelect").data("kendoComboBox");

                if (vendorCombo) { $("#vendorComboBox").val(vendorCombo.value()); }
                if (billCombo) { $("#billComboBox").val(billCombo.value()); }
                if (paymentMethodCombo) { $("#paymentMethodSelect").val(paymentMethodCombo.value()); }
                if (onlineAccountCombo) { $("#onlineAccountSelect").val(onlineAccountCombo.value()); }

                // Require Payment Method
                const pm = paymentMethodCombo ? paymentMethodCombo.value() : '';
                if (!pm) {
                    event.preventDefault();
                    showWarningMessage('Please select Payment Method.');
                    $("#paymentMethodSelect").addClass('is-invalid');
                    return false;
                } else {
                    $("#paymentMethodSelect").removeClass('is-invalid');
                }

                // If Online, require Online Account
                if (pm === 'Online') {
                    const acc = onlineAccountCombo ? onlineAccountCombo.value() : '';
                    if (!acc) {
                        event.preventDefault();
                        showWarningMessage('Please select Online Account for Online payment method.');
                        $("#onlineAccountSelect").addClass('is-invalid');
                        return false;
                    } else {
                        $("#onlineAccountSelect").removeClass('is-invalid');
                    }
                    
                    // Validate account balance
                    const balance = parseFloat($("#accountBalance").val()) || 0;
                    const paymentAmount = parseFloat($("#PaymentAmount").val()) || 0;
                    
                    if (balance <= 0) {
                        event.preventDefault();
                        showWarningMessage('Account balance is insufficient. Available balance: $' + balance.toFixed(2));
                        $("#accountBalance").addClass('is-invalid');
                        return false;
                    }
                    
                    if (paymentAmount > balance) {
                        event.preventDefault();
                        showWarningMessage(`Payment amount ($${paymentAmount.toFixed(2)}) exceeds available account balance ($${balance.toFixed(2)}).`);
                        $("#PaymentAmount").addClass('is-invalid');
                        return false;
                    }
                }
                
                // Validate payment amount against bill due amount
                if (selectedBillDueAmount > 0) {
                    const paymentAmount = parseFloat($("#PaymentAmount").val()) || 0;
                    if (paymentAmount > selectedBillDueAmount) {
                        event.preventDefault();
                        showWarningMessage(`Payment amount ($${paymentAmount.toFixed(2)}) cannot exceed bill due amount ($${selectedBillDueAmount.toFixed(2)}).`);
                        $("#PaymentAmount").addClass('is-invalid');
                        return false;
                    }
                }
                
                // Final validation check
                if (!validatePaymentAmount()) {
                    event.preventDefault();
                    return false;
                }
            });

            // Loading state on submit
            $('form').on('submit', function (event) {
                if (event.isDefaultPrevented && event.isDefaultPrevented()) {
                    return;
                }
                const submitBtn = $(this).find('button[type="submit"]');
                submitBtn.prop('disabled', true);
                submitBtn.html('<i class="fa-solid fa-spinner fa-spin me-2"></i>Creating Payment...');
            });

            function initializePaymentMethodCombo() {
                $("#paymentMethodSelect").kendoComboBox({
                    dataSource: { data: [ { value: "Cash", text: "Cash" }, { value: "Online", text: "Online" } ] },
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select Payment Method --",
                    filter: "contains",
                    suggest: true,
                    change: function () { toggleOnlineAccountDiv(); }
                });

                $("#onlineAccountSelect").kendoComboBox({
                    dataSource: [],
                    dataTextField: "text",
                    dataValueField: "value",
                    placeholder: "-- Select Online Account --",
                    filter: "contains",
                    suggest: true,
                    enabled: false,
                    change: function() {
                        const accountId = this.value();
                        if (accountId) {
                            loadAccountBalance(accountId);
                        } else {
                            $("#accountBalanceDiv").hide();
                            $("#accountBalance").val("");
                        }
                    }
                });
            }

            function toggleOnlineAccountDiv() {
                const pmCombo = $("#paymentMethodSelect").data("kendoComboBox");
                const accCombo = $("#onlineAccountSelect").data("kendoComboBox");
                const accDiv = $("#onlineAccountDiv");
                const balanceDiv = $("#accountBalanceDiv");
                if (!pmCombo || !accCombo) return;
                const pm = pmCombo.value();
                if (pm === 'Online') {
                    accDiv.show();
                    accCombo.enable(true);
                    if (accCombo.dataSource.data().length === 0) {
                        loadOnlineAccounts();
                    }
                    // Load balance if account is already selected
                    const currentAccountId = accCombo.value();
                    if (currentAccountId) {
                        loadAccountBalance(currentAccountId);
                    }
                } else {
                    accDiv.hide();
                    balanceDiv.hide();
                    accCombo.enable(false);
                    accCombo.value("");
                    $("#accountBalance").val("");
                    $("#balanceWarning").hide();
                }
            }

            function loadAccountBalance(accountId) {
                if (!accountId) {
                    $("#accountBalanceDiv").hide();
                    return;
                }

                fetch('@Url.Action("GetAccountBalance", "VendorPayments")' + '?accountId=' + accountId)
                    .then(response => response.json())
                    .then(data => {
                        const balanceDiv = $("#accountBalanceDiv");
                        const balanceInput = $("#accountBalance");
                        const balanceWarning = $("#balanceWarning");
                        
                        if (data.success && typeof data.balance !== 'undefined') {
                            const balance = parseFloat(data.balance) || 0;
                            balanceInput.val(balance.toFixed(2));
                            balanceDiv.show();
                            
                            // Update balance styling and warning based on balance and payment amount
                            updateBalanceDisplay(balance);
                            
                            // Validate payment amount against balance
                            validatePaymentAmount();
                        } else {
                            balanceDiv.hide();
                            console.error('Error loading account balance:', data.message || 'Unknown error');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching account balance:', error);
                        $("#accountBalanceDiv").hide();
                    });
            }

            function updateBalanceDisplay(balance) {
                const balanceInput = $("#accountBalance");
                const balanceWarning = $("#balanceWarning");
                const paymentAmount = parseFloat($("#PaymentAmount").val()) || 0;
                
                if (balance <= 0) {
                    balanceInput.css('background-color', '#fee');
                    balanceInput.css('color', '#dc3545');
                    balanceWarning.text('Insufficient balance').show();
                } else if (paymentAmount > balance) {
                    balanceInput.css('background-color', '#fff3cd');
                    balanceInput.css('color', '#856404');
                    balanceWarning.text(`Payment amount exceeds available balance by $${(paymentAmount - balance).toFixed(2)}`).show();
                } else {
                    balanceInput.css('background-color', '#d4edda');
                    balanceInput.css('color', '#155724');
                    balanceWarning.hide();
                }
            }

            function validatePaymentAmount() {
                const paymentMethodCombo = $("#paymentMethodSelect").data("kendoComboBox");
                const paymentMethod = paymentMethodCombo ? paymentMethodCombo.value() : '';
                const paymentAmount = parseFloat($("#PaymentAmount").val()) || 0;
                const $amountInput = $("#PaymentAmount");
                
                // Clear previous validation
                $amountInput.removeClass('is-invalid');
                
                if (paymentAmount <= 0) {
                    return true; // Let HTML5 validation handle this
                }
                
                // Validate against bill due amount
                if (selectedBillDueAmount > 0 && paymentAmount > selectedBillDueAmount) {
                    $amountInput.addClass('is-invalid');
                    showWarningMessage(`Payment amount ($${paymentAmount.toFixed(2)}) cannot exceed bill due amount ($${selectedBillDueAmount.toFixed(2)}).`);
                    return false;
                }
                
                // Validate against account balance for online payments
                if (paymentMethod === 'Online') {
                    const balance = parseFloat($("#accountBalance").val()) || 0;
                    
                    // Update balance display to show warnings
                    if (balance > 0) {
                        updateBalanceDisplay(balance);
                    }
                    
                    if (balance <= 0) {
                        $amountInput.addClass('is-invalid');
                        showWarningMessage('Account balance is insufficient. Available balance: $' + balance.toFixed(2));
                        return false;
                    }
                    
                    if (paymentAmount > balance) {
                        $amountInput.addClass('is-invalid');
                        showWarningMessage(`Payment amount ($${paymentAmount.toFixed(2)}) exceeds available account balance ($${balance.toFixed(2)}).`);
                        return false;
                    }
                }
                
                return true;
            }

            function loadOnlineAccounts() {
                fetch('@Url.Action("GetOnlineAccounts", "VendorPayments")')
                    .then(r => r.json())
                    .then(data => {
                        const accCombo = $("#onlineAccountSelect").data("kendoComboBox");
                        if (!accCombo) return;
                        accCombo.dataSource.data([]);
                        if (data && data.length > 0) {
                            data.forEach(function (acc) {
                                accCombo.dataSource.add({ value: acc.value, text: acc.text });
                            });
                        }
                    })
                    .catch(err => { console.error('Error loading online accounts', err); });
            }

            // Toaster-style warning
            function showWarningMessage(message) {
                $('.alert-warning').remove();
                var alertHtml = '<div class="alert alert-warning alert-dismissible fade show" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;">' +
                    '<i class="fa-solid fa-exclamation-triangle me-2"></i>' + message +
                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' +
                    '</div>';
                $('body').append(alertHtml);
                setTimeout(function () { $('.alert-warning').fadeOut(); }, 5000);
            }
        });
    </script>
}

