@model IMS.Models.VendorPaymentViewModel
@{
    ViewBag.Title = "Vendor Payments";
}

<link href="~/css/product-management.css" rel="stylesheet" />
<link href="~/css/user-management.css" rel="stylesheet" />

<div class="card shadow-sm">
    <div class="card-header bg-primary text-white">
        <h2 class="mb-0" style="text-align:center">Vendor Payments Management</h2>
    </div>
    <div class="card-body">
        <!-- Toolbar -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <a asp-action="CreatePayment" class="btn btn-success me-2">
                    <i class="fa-solid fa-plus me-1"></i>Add New Payment
                </a>
            </div>
        </div>

        <!-- Advanced Filters (styled like Customer Payments) -->
        <div class="card mb-4 shadow-sm">
            <div class="card-header bg-gradient" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                <div class="d-flex align-items-center justify-content-between">
                    <h6 class="mb-0 text-white">
                        <i class="fa-solid fa-filter me-2"></i>Advanced Filters
                    </h6>
                    <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="true" aria-controls="filterCollapse">
                        <i class="fa-solid fa-chevron-up"></i>
                    </button>
                </div>
            </div>
            <div class="collapse show" id="filterCollapse">
                <div class="card-body bg-light">
                    <form asp-action="Index" method="get" id="vendorPaymentsForm">
                        
                        <!-- Filter Row 1 -->
                        <div class="row g-3 mb-3">
                            <div class="col-lg-4 col-md-6">
                                <label class="form-label fw-semibold text-dark">
                                    <i class="fa-solid fa-building me-1 text-primary"></i>Vendor
                                </label>
                                <div>
                                    <input type="hidden" name="vendorId" id="vendorId" value="@ViewData["vendorId"]" />
                                    <input id="vendorIdCombo" style="width: 100%;" />
                                </div>
                            </div>
                            <div class="col-lg-4 col-md-6">
                                <label class="form-label fw-semibold text-dark">
                                    <i class="fa-solid fa-file-invoice me-1 text-primary"></i>Bill Number
                                </label>
                                <div>
                                    <input type="hidden" name="billNumber" id="billNumber" value="@ViewData["billNumber"]" />
                                    <input id="billNumberCombo" style="width: 100%;" />
                                </div>
                            </div>
                            <div class="col-lg-2 col-md-6">
                                <label class="form-label fw-semibold text-dark">
                                    <i class="fa-solid fa-calendar me-1 text-primary"></i>From Date
                                </label>
                                <input type="date" name="billDateFrom" id="billDateFrom" class="form-control" value="@ViewData["billDateFrom"]" />
                            </div>
                            <div class="col-lg-2 col-md-6">
                                <label class="form-label fw-semibold text-dark">
                                    <i class="fa-solid fa-calendar me-1 text-primary"></i>To Date
                                </label>
                                <input type="date" name="billDateTo" id="billDateTo" class="form-control" value="@ViewData["billDateTo"]" />
                            </div>
                        </div>
                        
                        
                        
                        <!-- Action Buttons Row -->
                        <div class="row">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary px-4 py-2 btn-user-search">
                                            <i class="fa-solid fa-magnifying-glass me-2"></i>Search Payments
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary px-4 py-2 btn-user-reset" onclick="resetFilters()">
                                            <i class="fa-solid fa-undo me-2"></i>Reset Filters
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Data Table Section -->
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Bill id</th>
                                <th>Vendor</th>
                                <th>Bill #</th>
                                <th>Bill date</th>
                                <th>Total amount</th>
                                <th>Discount amount</th>
                                <th>Paid amount</th>
                                <th>Total payable amount</th>
                                <th>Description</th>
                                <th>Payment Method</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.BillsList.Any())
                            {
                                @foreach (var bill in Model.BillsList)
                                {
                                    <tr>
                                        <td>@bill.BillId</td>
                                        <td>@bill.VendorName</td>
                                        <td>@bill.BillNumber</td>
                                        <td>@bill.BillDate.ToString("dd/MM/yyyy")</td>
                                        <td>@bill.TotalAmount.ToString("N2")</td>
                                        <td>@bill.DiscountAmount.ToString("N2")</td>
                                        <td>@bill.PaidAmount.ToString("N2")</td>
                                        <td>@bill.TotalPayableAmount.ToString("N2")</td>
                                        <td>@bill.Description</td>
                                        <td>
                                            @if (bill.PaymentMethod == "Cash")
                                            {
                                                <span class="badge bg-success">Cash</span>
                                            }
                                            else if (bill.PaymentMethod == "Online")
                                            {
                                                <span class="badge bg-primary">Online</span>
                                            }
                                            else if (bill.PaymentMethod == "PayLater" || bill.PaymentMethod == "Pay Later")
                                            {
                                                <span class="badge bg-warning text-dark">Pay Later</span>
                                            }
                                            else if (!string.IsNullOrEmpty(bill.PaymentMethod))
                                            {
                                                <span class="badge bg-secondary">@bill.PaymentMethod</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">-</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="10" class="text-center bg-light" style="height: 200px; vertical-align: middle;">
                                        <div class="text-muted">No bills found.</div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Summary and Action Buttons Section -->
        <div class="row mt-3">
            <!-- Summary Totals (Left Side) -->
            <div class="col-md-8">
                <div class="card bg-light">
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-3">
                                <div class="border-end">
                                    <strong>Total amount: @Model.TotalAmount.ToString("N2")</strong>
                                </div>
                            </div>
                            <div class="col-3">
                                <div class="border-end">
                                    <strong>Total discount amount: @Model.TotalDiscountAmount.ToString("N2")</strong>
                                </div>
                            </div>
                            <div class="col-3">
                                <div class="border-end">
                                    <strong>Total paid amount: @Model.TotalPaidAmount.ToString("N2")</strong>
                                </div>
                            </div>
                            <div class="col-3">
                                <strong>Total Payable amount: @Model.TotalPayableAmount.ToString("N2")</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-4">
            <div class="d-flex align-items-center">
                <span class="text-muted me-3">
                    <i class="fa-solid fa-info-circle me-1"></i>
                    Total: <strong>@Model.TotalCount</strong> bills | Showing <strong>@Model.PageSize</strong> per page
                </span>
            </div>
            <!-- Page Size -->
            <div class="d-flex justify-content-end align-items-center mb-3">
                <div>
                    <label for="pageSize" class="form-label me-2">Items Per Page:</label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                        <option value="50" selected="@(Model.PageSize == 50)">50</option>
                    </select>
                </div>
            </div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="Vendor Payments pagination">
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="1" asp-route-pageSize="@Model.PageSize" 
                               asp-route-vendorId="@ViewData["vendorId"]" asp-route-billNumber="@ViewData["billNumber"]" 
                               asp-route-billDateFrom="@ViewData["billDateFrom"]" asp-route-billDateTo="@ViewData["billDateTo"]"
                               asp-route-description="@ViewData["description"]">
                                <i class="fa-solid fa-angles-left"></i>
                            </a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                               asp-route-vendorId="@ViewData["vendorId"]" asp-route-billNumber="@ViewData["billNumber"]" 
                               asp-route-billDateFrom="@ViewData["billDateFrom"]" asp-route-billDateTo="@ViewData["billDateTo"]"
                               asp-route-description="@ViewData["description"]">
                                <i class="fa-solid fa-chevron-left"></i>
                            </a>
                        </li>
                        @{
                            int startPage = Math.Max(1, Model.CurrentPage - 2);
                            int endPage = Math.Min(Model.TotalPages, startPage + 4);
                            if (endPage - startPage < 4)
                            {
                                startPage = Math.Max(1, endPage - 4);
                            }
                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize"
                                   asp-route-vendorId="@ViewData["vendorId"]" asp-route-billNumber="@ViewData["billNumber"]" 
                                   asp-route-billDateFrom="@ViewData["billDateFrom"]" asp-route-billDateTo="@ViewData["billDateTo"]"
                                   asp-route-description="@ViewData["description"]">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize"
                               asp-route-vendorId="@ViewData["vendorId"]" asp-route-billNumber="@ViewData["billNumber"]" 
                               asp-route-billDateFrom="@ViewData["billDateFrom"]" asp-route-billDateTo="@ViewData["billDateTo"]"
                               asp-route-description="@ViewData["description"]">
                                <i class="fa-solid fa-chevron-right"></i>
                            </a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize"
                               asp-route-vendorId="@ViewData["vendorId"]" asp-route-billNumber="@ViewData["billNumber"]" 
                               asp-route-billDateFrom="@ViewData["billDateFrom"]" asp-route-billDateTo="@ViewData["billDateTo"]"
                               asp-route-description="@ViewData["description"]">
                                <i class="fa-solid fa-angles-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Enhanced Vendor Payments Management JavaScript - User Management Style
        
        // Wait for jQuery and Kendo to be ready
        $(document).ready(function() {
            // Wait a bit more to ensure Kendo is fully loaded
            setTimeout(function() {
                initializeVendorPaymentsManagement();
            }, 100);
        });

        function initializeVendorPaymentsManagement() {
            // Add loading states to buttons
            addLoadingStates();
            
            // Add smooth animations
            addSmoothAnimations();
            
            // Add form validation feedback
            addFormValidation();
            
            // Set default dates
            setDefaultDates();
            
            // Initialize collapse functionality
            initializeCollapse();
            
            // Initialize Kendo ComboBoxes
            initializeKendoComboBoxes();
            
            // Sync Kendo ComboBox values to hidden fields on form submission
            $("#vendorPaymentsForm").on("submit", function(e) {
                // Ensure values are synced before form submits
                var vendorCombo = $("#vendorIdCombo").data("kendoComboBox");
                var billNumberCombo = $("#billNumberCombo").data("kendoComboBox");
                
                if (vendorCombo) {
                    $("#vendorId").val(vendorCombo.value() || "");
                }
                if (billNumberCombo) {
                    $("#billNumber").val(billNumberCombo.value() || "");
                }
                
                // Show loading state on search button
                const searchBtn = document.querySelector('.btn-user-search');
                if (searchBtn && !searchBtn.disabled) {
                    searchBtn.classList.add('btn-loading');
                    const originalHTML = searchBtn.innerHTML;
                    searchBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...';
                    searchBtn.disabled = true;
                    
                    // Store original HTML to restore if submission is cancelled (shouldn't happen for GET, but just in case)
                    searchBtn.dataset.originalHtml = originalHTML;
                }
                
                // Let form submit normally - page reload will reset everything
            });
        }

        function addLoadingStates() {
            // Note: Search button loading state is handled in form submit handler
            // to ensure it only triggers when form actually submits
            // This prevents the button from getting stuck in loading state
            
            // Reset button loading state is handled in resetFilters() function
        }

        function addSmoothAnimations() {
            // Add hover effects to form elements
            const formElements = document.querySelectorAll('.user-search-floating');
            formElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.transition = 'transform 0.3s ease';
                });
                
                element.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        }

        function addFormValidation() {
            const inputs = document.querySelectorAll('.user-search-input');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.remove('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        function setDefaultDates() {
            const billDateFrom = document.getElementById('billDateFrom');
            const billDateTo = document.getElementById('billDateTo');
            
            if (!billDateFrom.value) {
                const today = new Date();
                const oneMonthAgo = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
                billDateFrom.value = oneMonthAgo.toISOString().split('T')[0];
            }
            
            if (!billDateTo.value) {
                const today = new Date();
                billDateTo.value = today.toISOString().split('T')[0];
            }
        }

        function initializeCollapse() {
            const collapseElement = document.getElementById('filterCollapse');
            const toggleButton = document.querySelector('[data-bs-target="#filterCollapse"]');
            const toggleIcon = toggleButton.querySelector('i');

            collapseElement.addEventListener('show.bs.collapse', function () {
                toggleIcon.classList.remove('fa-chevron-down');
                toggleIcon.classList.add('fa-chevron-up');
            });

            collapseElement.addEventListener('hide.bs.collapse', function () {
                toggleIcon.classList.remove('fa-chevron-up');
                toggleIcon.classList.add('fa-chevron-down');
            });
        }

        // Initialize Kendo ComboBoxes
        function initializeKendoComboBoxes() {
            // Destroy existing ComboBoxes if they exist to prevent re-initialization issues
            var existingVendorCombo = $("#vendorIdCombo").data("kendoComboBox");
            var existingBillNumberCombo = $("#billNumberCombo").data("kendoComboBox");
            
            if (existingVendorCombo) {
                existingVendorCombo.destroy();
            }
            if (existingBillNumberCombo) {
                existingBillNumberCombo.destroy();
            }
            
            // Get selected values from hidden inputs or query parameters
            var selectedVendorId = $("#vendorId").val() || getQueryParam('vendorId');
            var selectedBillNumber = $("#billNumber").val() || getQueryParam('billNumber');
            
            // Initialize Vendor ComboBox
            $("#vendorIdCombo").kendoComboBox({
                dataSource: {
                    transport: {
                        read: {
                            url: "/VendorPayments/GetVendors",
                            dataType: "json"
                        }
                    }
                },
                dataTextField: "text",
                dataValueField: "value",
                placeholder: "All Vendors",
                filter: "contains",
                suggest: true,
                minLength: 1,
                change: function() {
                    var vendorId = this.value();
                    $("#vendorId").val(vendorId || "");
                    loadBillNumbers(vendorId);
                },
                value: selectedVendorId || ""
            });

            // Initialize Bill Number ComboBox with empty data source initially
            var billNumbersData = [{ value: "", text: "All Bills" }];
            
            $("#billNumberCombo").kendoComboBox({
                dataSource: billNumbersData,
                dataTextField: "text",
                dataValueField: "value",
                placeholder: "All Bills",
                filter: "contains",
                suggest: true,
                minLength: 1,
                change: function() {
                    var billNumber = this.value();
                    $("#billNumber").val(billNumber || "");
                },
                value: selectedBillNumber || "",
                enabled: selectedVendorId ? true : false
            });
            
            // Load bill numbers if vendor is already selected (after page reload)
            if (selectedVendorId) {
                loadBillNumbers(selectedVendorId, selectedBillNumber);
            }
        }

        // Helper function to get query parameter value
        function getQueryParam(paramName) {
            var urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(paramName) || '';
        }

        function resetFilters() {
            // Get the reset button to show loading state
            const resetBtn = document.querySelector('.btn-user-reset');
            if (resetBtn) {
                resetBtn.classList.add('btn-loading');
                resetBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Resetting...';
                resetBtn.disabled = true;
            }
            
            // Reset Kendo ComboBoxes
            var vendorCombo = $("#vendorIdCombo").data("kendoComboBox");
            var billNumberCombo = $("#billNumberCombo").data("kendoComboBox");
            
            if (vendorCombo) {
                vendorCombo.value("");
            }
            if (billNumberCombo) {
                billNumberCombo.value("");
                billNumberCombo.dataSource.data([{ value: "", text: "All Bills" }]);
                billNumberCombo.enable(false);
            }
            
            // Reset hidden fields
            $("#vendorId").val("");
            $("#billNumber").val("");
            
            var billDateFrom = document.getElementById('billDateFrom');
            var billDateTo = document.getElementById('billDateTo');
            var description = document.getElementById('description');
            
            if (billDateFrom) billDateFrom.value = '';
            if (billDateTo) billDateTo.value = '';
            if (description) description.value = '';
            
            // Submit the form to reload with empty filters
            // The page reload will reset the button state naturally
            const form = document.querySelector('form[method="get"]');
            if (form) {
                // Small delay to show the loading state before redirect
                setTimeout(function() {
                    form.submit();
                }, 100);
            }
        }

        function loadBillNumbers(vendorId, selectedBillNumber) {
            var billNumberCombo = $("#billNumberCombo").data("kendoComboBox");
            
            if (!vendorId) {
                // Clear bill numbers if no vendor selected
                if (billNumberCombo) {
                    billNumberCombo.dataSource.data([{ value: "", text: "All Bills" }]);
                    billNumberCombo.value("");
                    billNumberCombo.enable(false);
                }
                $("#billNumber").val("");
                return;
            }
            
            // Get selected bill number from parameter or hidden field
            selectedBillNumber = selectedBillNumber || $("#billNumber").val();
            
            // Show loading state
            if (billNumberCombo) {
                billNumberCombo.dataSource.data([{ value: "", text: "Loading bills..." }]);
                billNumberCombo.value("");
                billNumberCombo.enable(false);
            }
            
            // Make AJAX call to get bill numbers
            $.ajax({
                url: "/VendorPayments/GetBillNumbers",
                type: "GET",
                data: { supplierId: vendorId },
                dataType: "json",
                success: function(data) {
                    var billNumbersData = [{ value: "", text: "All Bills" }];
                    
                    if (data && data.length > 0) {
                        data.forEach(function(bill) {
                            // Handle both camelCase and PascalCase property names
                            var billNumber = bill.BillNumber || bill.billNumber;
                            var totalDue = bill.TotalDueAmount || bill.totalDueAmount || 0;
                            billNumbersData.push({
                                value: billNumber.toString(),
                                text: billNumber.toString() + " (" + parseFloat(totalDue).toFixed(2) + ")"
                            });
                        });
                    }
                    
                    if (billNumberCombo) {
                        billNumberCombo.dataSource.data(billNumbersData);
                        billNumberCombo.enable(true);
                        
                        // Set selected value if exists (after page reload from search)
                        if (selectedBillNumber && selectedBillNumber !== "") {
                            // Small delay to ensure dataSource is updated
                            setTimeout(function() {
                                billNumberCombo.value(selectedBillNumber);
                                $("#billNumber").val(selectedBillNumber);
                                console.log("Set selected bill number to:", selectedBillNumber);
                            }, 150);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading bill numbers:', error);
                    if (billNumberCombo) {
                        billNumberCombo.dataSource.data([{ value: "", text: "Error loading bills" }]);
                        billNumberCombo.enable(false);
                    }
                }
            });
        }

        function printPreview() {
            // Add loading state
            const btn = event.target;
            const originalContent = btn.innerHTML;
            btn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Preparing...';
            btn.disabled = true;
            
            setTimeout(() => {
                window.print();
                btn.innerHTML = originalContent;
                btn.disabled = false;
            }, 1000);
        }

        function refreshData() {
            // Add loading state
            const btn = event.target;
            const originalContent = btn.innerHTML;
            btn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Refreshing...';
            btn.disabled = true;
            
            setTimeout(() => {
                window.location.reload();
            }, 500);
        }

        function closeWindow() {
            // Add loading state
            const btn = event.target;
            const originalContent = btn.innerHTML;
            btn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Closing...';
            btn.disabled = true;
            
            setTimeout(() => {
                window.close();
            }, 500);
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + Enter to search
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                const searchBtn = document.querySelector('.btn-user-search');
                if (searchBtn) {
                    searchBtn.click();
                }
            }
            
            // Escape to reset
            if (e.key === 'Escape') {
                const resetBtn = document.querySelector('.btn-user-reset');
                if (resetBtn) {
                    resetBtn.click();
                }
            }
        });

        // Add tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Pagination helper function
        function changePageSize(select) {
            // Show loading state
            const searchBtn = document.querySelector('.btn-user-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
                searchBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Loading...';
            }

            // Get current filter values from Kendo ComboBoxes
            const vendorCombo = $("#vendorIdCombo").data("kendoComboBox");
            const billNumberCombo = $("#billNumberCombo").data("kendoComboBox");
            
            const vendorId = vendorCombo ? vendorCombo.value() : $("#vendorId").val();
            const billNumber = billNumberCombo ? billNumberCombo.value() : $("#billNumber").val();
            const billDateFrom = document.getElementById("billDateFrom").value;
            const billDateTo = document.getElementById("billDateTo").value;
            
            // Build URL with parameters
            const params = new URLSearchParams();
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            if (vendorId) params.set('vendorId', vendorId);
            if (billNumber) params.set('billNumber', billNumber);
            if (billDateFrom) params.set('billDateFrom', billDateFrom);
            if (billDateTo) params.set('billDateTo', billDateTo);
            
            window.location.href = '@Url.Action("Index", "VendorPayments")' + '?' + params.toString();
        }
    </script>
}