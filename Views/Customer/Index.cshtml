@model IMS.Models.CustomerViewModel;
@{
    bool isAdmin = Convert.ToBoolean(User.FindFirst("IsAdmin")?.Value);
    string role = isAdmin ? "Admin" : "User";
    ViewBag.Title = "Customers List";
}

<link href="~/css/product-management.css" rel="stylesheet" />
<link href="~/css/user-management.css" rel="stylesheet" />

<div class="card shadow-sm">
    <div class="card-header bg-success text-white">
        <h2 class="mb-0" style="text-align:center"> Customer Management</h2>
    </div>
    <div class="card-body">
        <!-- Enhanced Search Section -->
        <div class="card mb-4 user-search-card">
            <div class="card-header user-search-header bg-transparent border-0 py-3">
                <div class="d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 user-search-title">
                        <i class="fa-solid fa-search user-search-icon me-2"></i>Search & Actions
                    </h5>
                </div>
            </div>
            <div class="card-body user-search-section pt-0">
                <form asp-action="Index" 
                      asp-controller="Customer" 
                      asp-route-searchUsername="@ViewData["searchUsername"]" 
                      asp-route-searchContactNo="@ViewData["searchContactNo"]"
                      asp-route-searchEmail="@ViewData["searchEmail"]"
                      method="get">
                    
                    <div class="row g-3 mb-4">
                        <!-- Search Inputs Row -->
                        <div class="col-md-4">
                            <div class="form-floating user-search-floating">
                                <input type="text"
                                       name="searchUsername"
                                       value="@Context.Request.Query["searchUsername"]"
                                       class="form-control user-search-input"
                                       placeholder="Enter Customer Name"
                                       onchange="SearchNameChange()" />
                                <label class="text-muted">
                                    <i class="fa-solid fa-user me-1"></i>Customer Name
                                </label>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="form-floating user-search-floating">
                                <input type="text"
                                       name="searchContactNo"
                                       value="@Context.Request.Query["searchContactNo"]"
                                       class="form-control user-search-input"
                                       placeholder="Enter Contact Number"
                                       onchange="SearchNameChange()" />
                                <label class="text-muted">
                                    <i class="fa-solid fa-phone me-1"></i>Phone Number
                                </label>
                            </div>
                        </div>
                        
                        <div class="col-md-4">
                            <div class="form-floating user-search-floating">
                                <input type="text"
                                       name="searchEmail"
                                       value="@Context.Request.Query["searchEmail"]"
                                       class="form-control user-search-input"
                                       placeholder="Enter Email"
                                       onchange="SearchNameChange()" />
                                <label class="text-muted">
                                    <i class="fa-solid fa-envelope me-1"></i>Email Address
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Action Buttons Row -->
                    <div class="row">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-user-search">
                                        <i class="fa-solid fa-magnifying-glass me-2"></i>Search Customers
                                    </button>
                                    <a asp-action="Index" class="btn btn-user-reset">
                                        <i class="fa-solid fa-refresh me-2"></i>Reset Filters
                                    </a>
                                </div>
                                <a asp-action="Create" class="btn btn-user-create">
                                    <i class="fa-solid fa-plus me-2"></i>Create Customer
                                </a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-bordered custom-table">
                <thead>
                    <tr>
                        <th> Customer Id </th>
                        <th>Customer Name</th>
                        <th>Contact Number</th>
                        <th>Email</th>
                        <th>Address</th>
                        <th>Enabled</th>
                   
                        <th>Actions</th>


                    </tr>
                </thead>
                <tbody>
                    @if (Model.Customers.Any())
                    {
                        @foreach (var item in Model.Customers)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.CustomerId)</td>
                                <td>@Html.DisplayFor(modelitem => item.CustomerName)</td>
                                <td>@Html.DisplayFor(modelitem => item.CustomerContactNumber)</td>
                                <td>@Html.DisplayFor(modelitem => item.CustomerEmail)</td>
                                <td>@Html.DisplayFor(modelitem => item.CustomerAddress)</td>
                                    <td>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input @(item.IsEnabled ? "bg-success" : "bg-danger")"
                                                   type="checkbox"
                                                   @(item.IsEnabled ? "checked" : "")
                                                   disabled>
                                        </div>
                                    </td>
                               

                                <td class="table-actions">
                                    <div class="btn-group" role="group">
                                        <a asp-action="Details" asp-route-id="@item.CustomerId" class="btn btn-sm btn-outline-info" title="View Details">
                                            <i class="fa-solid fa-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@item.CustomerId" class="btn btn-sm btn-outline-warning" title="Edit Customer">
                                            <i class="fa-solid fa-edit"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@item.CustomerId" class="btn btn-sm btn-outline-danger" title="Delete Customer">
                                            <i class="fa-solid fa-trash"></i>
                                        </a>
                                    </div>
                                </td>


                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">No Record found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex justify-content-between align-items-center mt-3">
            <span class="text-muted">Total: @Model.TotalCount | Showing @Model.PageSize Records per page</span>
                <div class="end-0">
                    <label for="pageSize" class="form-label me-2 text-muted">Items Per Page :</label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block w-auto" onchange="changePageSize(this)">
                        <option value="5" selected="@(Model.PageSize == 5)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10)">10</option>
                        <option value="25" selected="@(Model.PageSize == 25)">25</option>
                    </select>
                </div>
            @if (Model.TotalPages > 1)
            {
                <nav aria-label="User pagination">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                               asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">First</a>
                        </li>
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize"
                               asp-route-searchUsername="@ViewData["searchUsername"]">Previous</a>
                        </li>
                        @{
                            int startPage = Math.Max(1, Model.CurrentPage - 1);
                            int endPage = Math.Min(Model.TotalPages, startPage + 2);
                            if (endPage - startPage < 2)
                            {
                                startPage = Math.Max(1, endPage - 2);
                            }

                        }
                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Next</a>
                        </li>
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@Model.TotalPages" asp-route-pageSize="@Model.PageSize" asp-route-searchUsername="@ViewData["searchUsername"]">Last</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // Enhanced Customer Management JavaScript
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeCustomerManagement();
        });

        function initializeCustomerManagement() {
            // Add loading states to buttons
            addLoadingStates();
            
            // Add smooth animations
            addSmoothAnimations();
            
            // Add form validation feedback
            addFormValidation();
        }

        function addLoadingStates() {
            const searchBtn = document.querySelector('.btn-user-search');
            const resetBtn = document.querySelector('.btn-user-reset');
            
            if (searchBtn) {
                searchBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Searching...';
                });
            }
            
            if (resetBtn) {
                resetBtn.addEventListener('click', function() {
                    this.classList.add('btn-loading');
                    this.innerHTML = '<i class="fa-solid fa-spinner fa-spin me-2"></i>Refreshing...';
                });
            }
        }

        function addSmoothAnimations() {
            // Add hover effects to form elements
            const formElements = document.querySelectorAll('.form-floating');
            formElements.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.transition = 'transform 0.3s ease';
                });
                
                element.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });
        }

        function addFormValidation() {
            const inputs = document.querySelectorAll('.form-control, .form-select');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.value.trim() !== '') {
                        this.classList.add('is-valid');
                        this.classList.remove('is-invalid');
                    } else {
                        this.classList.remove('is-valid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid')) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
        }

        function SearchNameChange() {
            // Add loading state
            const searchBtn = document.querySelector('.btn-user-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', document.getElementById('pageSize')?.value || '10');
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Customer")' + '?' + params.toString();
        }

        function changePageSize(select) {
            // Add loading state
            const searchBtn = document.querySelector('.btn-user-search');
            if (searchBtn) {
                searchBtn.classList.add('btn-loading');
            }
            
            // Get current form values
            const form = document.querySelector('form');
            const formData = new FormData(form);
            const params = new URLSearchParams();
            
            // Add all form data to params
            for (let [key, value] of formData.entries()) {
                if (value.trim() !== '') {
                    params.append(key, value);
                }
            }
            
            // Add pagination
            params.set('pageNumber', '1');
            params.set('pageSize', select.value);
            
            // Redirect with parameters
            window.location.href = '@Url.Action("Index", "Customer")' + '?' + params.toString();
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + Enter to search
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                const searchBtn = document.querySelector('.btn-user-search');
                if (searchBtn) {
                    searchBtn.click();
                }
            }
            
            // Escape to reset
            if (e.key === 'Escape') {
                const resetBtn = document.querySelector('.btn-user-reset');
                if (resetBtn) {
                    resetBtn.click();
                }
            }
        });

        // Add tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}
